import os
import sys
import datetime as dt
from glob import glob
import torch
import torch.optim as optim
import torch.optim.lr_scheduler as lr_scheduler
from torch.utils.data import DataLoader
import torchvision.transforms as T
import torchvision.models as models
from tqdm import tqdm
from DataSetUtils.PascalVOCDataset import PascalVOCDataset
from trainers.trainers import BaseTrainer, collate_fn, log_dataset_statistics_to_tensorboard
from torchmetrics.detection import MeanAveragePrecision
from torch.utils.tensorboard import SummaryWriter
from torchvision.models.detection.backbone_utils import resnet_fpn_backbone

# --- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è Faster R-CNN –∑ –≤–∏–±–æ—Ä–æ–º backbone ---
class FasterRCNNTrainer(BaseTrainer):
    """
    –ö–µ—Ä—É—î –ø—Ä–æ—Ü–µ—Å–æ–º –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ Faster R-CNN.
    –ù–∞ –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π backbone –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–∞ –≤ —è–∫–æ–º—É —Ä–µ–∂–∏–º—ñ –π–æ–≥–æ –Ω–∞–≤—á–∞—Ç–∏.
    """

    def __init__(self, training_params, dataset_dir):
        super().__init__(training_params, dataset_dir)
        self.backbone_type = None

    def _ask_training_mode(self):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥, —â–æ –∑–∞–ø–∏—Ç—É—î —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è."""
        print("\n   –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è:")
        print("     1: Fine-tuning (–Ω–∞–≤—á–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ '–≥–æ–ª–æ–≤—É', —à–≤–∏–¥—à–µ, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
        print("     2: Full training (–Ω–∞–≤—á–∞—Ç–∏ –≤—Å—é –º–æ–¥–µ–ª—å, –¥–æ–≤—à–µ)")
        while True:
            sub_choice = input("   –í–∞—à –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É (1 –∞–±–æ 2): ").strip()
            if sub_choice == '1':
                return '_finetune'
            elif sub_choice == '2':
                return '_full'
            else:
                print("   ‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")
    
    def _select_backbone(self):
        """
        –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É backbone —Ç–∞ —Ä–µ–∂–∏–º—É, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫.
        """
        print("\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '—Ö—Ä–µ–±–µ—Ç' (backbone) –¥–ª—è Faster R-CNN:")
        print("  1: ResNet-50 (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)")
        print("  2: ResNet-101 (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π, –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —Ç–æ—á–Ω—ñ—à–∏–π)")
        print("  3: MobileNetV3-Large (–¥—É–∂–µ —à–≤–∏–¥–∫–∏–π, –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤)")
        
        while True:
            choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1, 2 –∞–±–æ 3): ").strip()
            backbone_base = None
            if choice == '1':
                print("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ ResNet-50.")
                backbone_base = 'resnet50'
            elif choice == '2':
                print("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ ResNet-101.")
                backbone_base = 'resnet101'
            elif choice == '3':
                print("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ MobileNetV3-Large.")
                backbone_base = 'mobilenet'
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1, 2 –∞–±–æ 3.")
                continue

            # –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É backbone, –∑–∞–ø–∏—Ç—É—î–º–æ —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è
            training_mode_suffix = self._ask_training_mode()
            return f"{backbone_base}{training_mode_suffix}"

    def _get_model_name(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è, —Ä–æ–∑–±–∏—Ä–∞—é—á–∏ self.backbone_type."""
        if self.backbone_type is None:
            return "Faster R-CNN (Unknown)"
        
        parts = self.backbone_type.split('_')
        base_name_map = {
            'resnet50': 'ResNet50',
            'resnet101': 'ResNet101',
            'mobilenet': 'MobileNet'
        }
        mode_name_map = {
            'finetune': 'Fine-tune',
            'full': 'Full'
        }
        
        base_name = base_name_map.get(parts[0], 'Unknown')
        mode_name = mode_name_map.get(parts[1], 'Training')
        
        return f"Faster R-CNN ({base_name} {mode_name})"

    def _get_model(self, num_classes):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–æ–¥–µ–ª—å Faster R-CNN –∑ –æ–±—Ä–∞–Ω–∏–º backbone —Ç–∞ —Ä–µ–∂–∏–º–æ–º –Ω–∞–≤—á–∞–Ω–Ω—è."""
        print(f"üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {self._get_model_name()}")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º–æ—Ä–æ–∂—É–≤–∞—Ç–∏ –≤–∞–≥–∏
        is_finetune = self.backbone_type.endswith('_finetune')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–µ–ª—å
        if self.backbone_type.startswith('resnet50'):
            model = models.detection.fasterrcnn_resnet50_fpn(weights=models.detection.FasterRCNN_ResNet50_FPN_Weights.DEFAULT)
        
        elif self.backbone_type.startswith('resnet101'):
            try:
                from torchvision.models import ResNet101_Weights
                backbone = resnet_fpn_backbone('resnet101', weights=ResNet101_Weights.IMAGENET1K_V1)
            except (ImportError, AttributeError):
                print("‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–∞–≥–∏ –∑–∞ –Ω–æ–≤–∏–º API. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è 'pretrained=True'.")
                backbone = resnet_fpn_backbone('resnet101', pretrained=True)
            model = models.detection.FasterRCNN(backbone, num_classes=num_classes)
            # –î–ª—è ResNet101 –≥–æ–ª–æ–≤–∞ –≤–∂–µ –∑–∞–º—ñ–Ω–µ–Ω–∞, —Ç–æ–º—É –≤–∏—Ö–æ–¥–∏–º–æ —Ä–∞–Ω—ñ—à–µ
            return model
        
        elif self.backbone_type.startswith('mobilenet'):
            model = models.detection.fasterrcnn_mobilenet_v3_large_fpn(
                weights=models.detection.FasterRCNN_MobileNet_V3_Large_FPN_Weights.DEFAULT
            )
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø backbone '{self.backbone_type}'.")
            sys.exit(1)
        
        # –£–º–æ–≤–Ω–µ "–∑–∞–º–æ—Ä–æ–∂—É–≤–∞–Ω–Ω—è" –≤–∞–≥ –¥–ª—è ResNet50 —Ç–∞ MobileNet
        if is_finetune:
            print("‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂—É–≤–∞–Ω–Ω—è –≤–∞–≥ backbone. –ù–∞–≤—á–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ '–≥–æ–ª–æ–≤–∏' (fine-tuning).")
            for param in model.parameters():
                param.requires_grad = False
        else:
            print("üî• –£—Å—ñ –≤–∞–≥–∏ –º–æ–¥–µ–ª—ñ —Ä–æ–∑–º–æ—Ä–æ–∂–µ–Ω–æ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è (full training).")
            
        # –ó–∞–º—ñ–Ω—é—î–º–æ –≥–æ–ª–æ–≤—É –¥–ª—è ResNet50 —Ç–∞ MobileNet
        in_features = model.roi_heads.box_predictor.cls_score.in_features
        model.roi_heads.box_predictor = models.detection.faster_rcnn.FastRCNNPredictor(in_features, num_classes)
                
        return model

    def start_or_resume_training(self, dataset_stats):
        if self.backbone_type is None:
            self.backbone_type = self._select_backbone()

        imgsz = dataset_stats.get('image_size')
        print(f"\n--- –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è {self._get_model_name()} ---")
        
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"üîå –û–±—Ä–∞–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è: {str(device).upper()}")
        
        if imgsz:
            print(f"üñºÔ∏è –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {imgsz[0]}x{imgsz[1]}.")
        else:
            print("‚ö†Ô∏è –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (imgsz) –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä.")

        project_dir = os.path.join('runs', f'faster-rcnn-{self.backbone_type}')
        epochs = self.params.get('epochs', 25)
        batch_size = self.params.get('batch', 4)
        learning_rate = self.params.get('lr', 0.0001)
        self.accumulation_steps = self.params.get('accumulation_steps', 1)
        lr_step_size = self.params.get('lr_scheduler_step_size', 10)
        lr_gamma = self.params.get('lr_scheduler_gamma', 0.1)

        if self.accumulation_steps > 1:
            effective_batch_size = batch_size * self.accumulation_steps
            print(f"üîÑ –£–≤—ñ–º–∫–Ω–µ–Ω–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è –≥—Ä–∞–¥—ñ—î–Ω—Ç—ñ–≤. –ö—Ä–æ–∫—ñ–≤: {self.accumulation_steps}. –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π batch_size: {effective_batch_size}")

        train_loader, val_loader, num_classes = self._prepare_dataloaders(batch_size)
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {num_classes - 1} –∫–ª–∞—Å—ñ–≤ (+1 —Ñ–æ–Ω). –í—Å—å–æ–≥–æ –∫–ª–∞—Å—ñ–≤ –¥–ª—è –º–æ–¥–µ–ª—ñ: {num_classes}")

        model = self._get_model(num_classes).to(device)
        optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=1e-4)
        scheduler = lr_scheduler.StepLR(optimizer, step_size=lr_step_size, gamma=lr_gamma)
        
        run_name, checkpoint_path = self._check_for_resume_rcnn(project_dir)
        start_epoch, best_map, global_step = 0, 0.0, 0
        
        run_dir = os.path.join(project_dir, run_name)
        os.makedirs(run_dir, exist_ok=True)
        writer = SummaryWriter(log_dir=os.path.join(run_dir, 'tensorboard_logs'))
        print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤: {run_dir}")
        print(f"üìà –õ–æ–≥–∏ –¥–ª—è TensorBoard –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤: {writer.log_dir}")

        log_dataset_statistics_to_tensorboard(train_loader.dataset, writer)

        if checkpoint_path:
            model, optimizer, scheduler, start_epoch, best_map = self._load_checkpoint(
                checkpoint_path, model, optimizer, scheduler, device
            )
            print(f"üöÄ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è –∑ {start_epoch}-—ó –µ–ø–æ—Ö–∏.")
        
        print(f"\nüöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ {epochs} –µ–ø–æ—Ö...")
        for epoch in range(start_epoch, epochs):
            global_step = self._train_one_epoch(model, optimizer, train_loader, device, epoch, writer, global_step, imgsz)
            val_map = self._validate_one_epoch(model, val_loader, device, imgsz)
            
            scheduler.step()
            
            print(f"Epoch {epoch + 1}/{epochs} | Validation mAP: {val_map:.4f}")

            writer.add_scalar('Validation/mAP', val_map, epoch)
            writer.add_scalar('LearningRate/Main', optimizer.param_groups[0]['lr'], epoch)

            is_best = val_map > best_map
            if is_best:
                best_map = val_map

            self.save_checkpoint({
                'epoch': epoch + 1,
                'model_state_dict': model.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
                'scheduler_state_dict': scheduler.state_dict(),
                'best_map': best_map
            }, is_best, run_dir)

        writer.close()
        print("\nüéâ –ù–∞–≤—á–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        best_model_path = os.path.join(run_dir, "best_model.pth")
        final_path = None
        if os.path.exists(best_model_path):
            final_path = f"Final-{self._get_model_name()}-best.pth"
            shutil.copy(best_model_path, final_path)
            print(f"\n‚úÖ –ù–∞–π–∫—Ä–∞—â—É –º–æ–¥–µ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É —Ñ–∞–π–ª: {final_path} (mAP: {best_map:.4f})")
        
        summary = {
            "model_name": self._get_model_name(),
            "image_count": dataset_stats.get("image_count", "N/A"),
            "negative_count": dataset_stats.get("negative_count", "N/A"),
            "class_count": dataset_stats.get("class_count", num_classes - 1),
            "image_size": dataset_stats.get("image_size", "N/A"),
            "best_map": f"{best_map:.4f}",
            "best_model_path": final_path,
            "hyperparameters": self.params
        }
        return summary   

    def _prepare_dataloaders(self, batch_size):
        label_map_path = os.path.join(self.dataset_dir, 'label_map.txt')
        with open(label_map_path, 'r') as f:
            class_names = [line.strip() for line in f.readlines()]
        
        label_map = {name: i+1 for i, name in enumerate(class_names)}
        num_classes = len(label_map) + 1 # N –∫–ª–∞—Å—ñ–≤ + 1 —Ñ–æ–Ω

        train_dataset = PascalVOCDataset(os.path.join(self.dataset_dir, 'train'), transforms=None, label_map=label_map)
        val_dataset = PascalVOCDataset(os.path.join(self.dataset_dir, 'val'), transforms=None, label_map=label_map)
        
        train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_fn, num_workers=0, pin_memory=True)
        val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, collate_fn=collate_fn, num_workers=0, pin_memory=True)

        return train_loader, val_loader, num_classes

    def _train_one_epoch(self, model, optimizer, data_loader, device, epoch, writer, global_step, imgsz):
        model.train()
        progress_bar = tqdm(data_loader, desc=f"Epoch {epoch + 1} [Train]")
        optimizer.zero_grad()
        
        transforms_list = []
        if imgsz:
            height, width = imgsz[1], imgsz[0]
            transforms_list.append(T.Resize((height, width)))
        transforms_list.append(T.ToTensor())
        transforms = T.Compose(transforms_list)
        
        for i, (images, targets) in enumerate(progress_bar):
            images = [transforms(img).to(device) for img in images]
            targets = [{k: v.to(device) for k, v in t.items()} for t in targets]
            
            loss_dict = model(images, targets)
            losses = sum(loss for loss in loss_dict.values())
            
            if self.accumulation_steps > 1:
                losses = losses / self.accumulation_steps
            
            losses.backward()
            
            if (i + 1) % self.accumulation_steps == 0 or (i + 1) == len(data_loader):
                optimizer.step()
                optimizer.zero_grad()

                display_loss = losses.item() * self.accumulation_steps if self.accumulation_steps > 1 else losses.item()
                writer.add_scalar('Train/Loss_step', display_loss, global_step)
                global_step += 1

            progress_bar.set_postfix(loss=losses.item())
        
        return global_step

    def _validate_one_epoch(self, model, data_loader, device, imgsz):
        model.eval()
        metric = MeanAveragePrecision(box_format='xyxy').to(device)
        
        transforms_list = []
        if imgsz:
            height, width = imgsz[1], imgsz[0]
            transforms_list.append(T.Resize((height, width)))
        transforms_list.append(T.ToTensor())
        transforms = T.Compose(transforms_list)

        with torch.no_grad():
            progress_bar = tqdm(data_loader, desc="Validating")
            for images, targets in progress_bar:
                images = [transforms(img).to(device) for img in images]
                targets_for_metric = [{k: v.to(device) for k, v in t.items()} for t in targets]

                predictions = model(images)
                metric.update(predictions, targets_for_metric)
        
        mAP_dict = metric.compute()
        return mAP_dict['map'].item()

    def _check_for_resume_rcnn(self, project_path):
        train_dirs = sorted(glob(os.path.join(project_path, "train*")))
        if not train_dirs:
            run_name = f'train_{dt.datetime.now().strftime("%Y%m%d_%H%M%S")}'
            return run_name, None
        
        last_train_dir = train_dirs[-1]
        last_model_path = os.path.join(last_train_dir, "last_checkpoint.pth")
        
        if os.path.exists(last_model_path):
            print(f"\n‚úÖ –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è: {last_train_dir}")
            answer = input("–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç–æ—á–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è? (y/n): ").strip().lower()
            if answer in ['y', 'Y', '–Ω', '–ù']:
                print(f"üöÄ –ù–∞–≤—á–∞–Ω–Ω—è –±—É–¥–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É: {last_model_path}")
                return os.path.basename(last_train_dir), last_model_path
        
        print("üóëÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ–≥—Ä–µ—Å –±—É–¥–µ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ. –ù–∞–≤—á–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –∑ –Ω—É–ª—è.")
        run_name = f'train_{dt.datetime.now().strftime("%Y%m%d_%H%M%S")}'
        return run_name, None
        
    def _load_checkpoint(self, path, model, optimizer, scheduler, device):
        checkpoint = torch.load(path, map_location=device)
        model.load_state_dict(checkpoint['model_state_dict'])
        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
        if 'scheduler_state_dict' in checkpoint:
            scheduler.load_state_dict(checkpoint['scheduler_state_dict'])
        start_epoch = checkpoint['epoch']
        best_map = checkpoint.get('best_map', 0.0)
        return model, optimizer, scheduler, start_epoch, best_map
