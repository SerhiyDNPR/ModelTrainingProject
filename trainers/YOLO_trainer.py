import os
import sys
import datetime as dt
import shutil 
from ultralytics import YOLO
from trainers.trainers import BaseTrainer, log_dataset_statistics_to_tensorboard
import torch

class UltralyticsDatasetWrapper:
    """–ê–¥–∞–ø—Ç—É—î –¥–∞—Ç–∞—Å–µ—Ç ultralytics –¥–æ —Ñ–æ—Ä–º–∞—Ç—É, —è–∫–∏–π –æ—á—ñ–∫—É—î –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    def __init__(self, ultralytics_dataset):
        self.dataset = ultralytics_dataset
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –¥–µ–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
        imgsz = self.dataset.imgsz
        self.img_h, self.img_w = (imgsz, imgsz) if isinstance(imgsz, int) else (imgsz[0], imgsz[1])

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        original_item = self.dataset[idx]
        bboxes_xywhn = original_item['bboxes']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–∞–º–∫–∏ –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É [x_center, y_center, w, h]
        # —É –ø—ñ–∫—Å–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç [x_min, y_min, x_max, y_max]
        bboxes_xyxy = []
        for bbox in bboxes_xywhn:
            x_center, y_center, w, h = bbox
            x1 = (x_center - w / 2) * self.img_w
            y1 = (y_center - h / 2) * self.img_h
            x2 = (x_center + w / 2) * self.img_w
            y2 = (y_center + h / 2) * self.img_h
            bboxes_xyxy.append([x1, y1, x2, y2])
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ü—ñ–ª—å —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        return None, {'boxes': torch.tensor(bboxes_xyxy)}

# --- –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
def log_stats_callback(trainer):
    """
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é ultralytics
    –ø—ñ—Å–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö, –∞–ª–µ –¥–æ –ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á–∞–Ω–Ω—è.
    """
    print("\n–í–∏–∫–ª–∏–∫ –∫–æ–ª–±–µ–∫—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç—É...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ª–æ–≥–≥–µ—Ä TensorBoard
    if hasattr(trainer, 'loggers') and hasattr(trainer.loggers, 'tb'):
        tensorboard_writer = trainer.loggers.tb
        wrapped_dataset = UltralyticsDatasetWrapper(trainer.train_loader.dataset)
        log_dataset_statistics_to_tensorboard(wrapped_dataset, tensorboard_writer)
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—Ç–∞—Å–µ—Ç—É —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ TensorBoard.")
    else:
        print("‚ö†Ô∏è TensorBoard –ª–æ–≥–≥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


class YOLOTrainer(BaseTrainer):
    """
    –ö–µ—Ä—É—î –ø—Ä–æ—Ü–µ—Å–æ–º –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π YOLO.
    –ù–∞ –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—É –≤–µ—Ä—Å—ñ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ (v8 –∞–±–æ v9)
    —Ç–∞ –≤ —è–∫–æ–º—É —Ä–µ–∂–∏–º—ñ —ó—ó –Ω–∞–≤—á–∞—Ç–∏ (fine-tune –∞–±–æ full training).
    """

    def __init__(self, training_params, dataset_dir):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –ø—Ä–∏–π–º–∞—î –≤–µ—Ä—Å—ñ—é –º–æ–¥–µ–ª—ñ, –≤–æ–Ω–∞ –±—É–¥–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.
        """
        super().__init__(training_params, dataset_dir)
        self.model_config = None # –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    def _ask_training_mode(self):
        """
        –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥, —â–æ –∑–∞–ø–∏—Ç—É—î —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        """
        print("\n   –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è YOLO:")
        print("     1: Fine-tuning (–ø–æ—á–∞—Ç–∏ –∑ –≤–∞–≥, –Ω–∞–≤—á–µ–Ω–∏—Ö –Ω–∞ COCO, —à–≤–∏–¥—à–µ, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
        print("     2: Full training (–Ω–∞–≤—á–∞—Ç–∏ '–∑ —á–∏—Å—Ç–æ–≥–æ –∞—Ä–∫—É—à–∞', –∑–Ω–∞—á–Ω–æ –¥–æ–≤—à–µ)")
        while True:
            sub_choice = input("   –í–∞—à –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É (1 –∞–±–æ 2): ").strip()
            if sub_choice == '1':
                return 'finetune'
            elif sub_choice == '2':
                return 'full'
            else:
                print("   ‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")

    def _select_model_version(self):
        """
        –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≤–µ—Ä—Å—ñ—ó YOLO —Ç–∞ —Ä–µ–∂–∏–º—É –Ω–∞–≤—á–∞–Ω–Ω—è,
        —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é.
        """
        print("\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–µ—Ä—Å—ñ—é –º–æ–¥–µ–ª—ñ YOLO –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è:")
        print("  1: YOLOv8 (—à–≤–∏–¥–∫–∞, —Å—Ç–∞–±—ñ–ª—å–Ω–∞, –≥–∞—Ä–Ω–∏–π –±–∞–∑–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)")
        print("  2: YOLOv9 (–Ω–æ–≤—ñ—à–∞, –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —Ç–æ—á–Ω—ñ—à–∞, –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à –≤–∏–º–æ–≥–ª–∏–≤–æ—é)")

        model_choice = None
        while model_choice not in ['1', '2']:
            model_choice = input("–í–∞—à –≤–∏–±—ñ—Ä –≤–µ—Ä—Å—ñ—ó (1 –∞–±–æ 2): ").strip()
            if model_choice not in ['1', '2']:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")

        # –¢–µ–ø–µ—Ä –∑–∞–ø–∏—Ç—É—î–º–æ —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è
        training_mode = self._ask_training_mode()

        config = {}
        if model_choice == '1':
            base_name = 'YOLOv8'
            weights_prefix = 'yolov8n'
        else: # model_choice == '2'
            base_name = 'YOLOv9'
            weights_prefix = 'yolov9c'
        
        # –ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É, –æ–±–∏—Ä–∞—î–º–æ —Ñ–∞–π–ª .pt (–≤–∞–≥–∏) –∞–±–æ .yaml (–∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞)
        if training_mode == 'finetune':
            config['name'] = f"{base_name} (Fine-tune)"
            config['weights'] = f"{weights_prefix}.pt"
            print(f"‚úÖ –û–±—Ä–∞–Ω–æ –¥–æ–Ω–∞–≤—á–∞–Ω–Ω—è (Fine-tuning). –ú–æ–¥–µ–ª—å –ø–æ—á–Ω–µ –∑ –≤–∞–≥ '{config['weights']}'.")
        else: # training_mode == 'full'
            config['name'] = f"{base_name} (Full)"
            config['weights'] = f"{weights_prefix}.yaml"
            print(f"‚úÖ –û–±—Ä–∞–Ω–æ –ø–æ–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è. –ú–æ–¥–µ–ª—å –±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑ –Ω—É–ª—è –∑–≥—ñ–¥–Ω–æ –∑ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é '{config['weights']}'.")
            
        return config

    def _get_model_name(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó."""
        return self.model_config.get('name', 'YOLO') if self.model_config else 'YOLO'

    def start_or_resume_training(self, dataset_stats):
        if self.model_config is None:
            self.model_config = self._select_model_version()

        model_name_str = self._get_model_name()
        weights_file = self.model_config['weights']

        print(f"\n--- –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è {model_name_str} ---")
        resume_path, should_resume = self._check_for_resume(self.params['project'])
        
        # model_to_load –±—É–¥–µ –∞–±–æ —à–ª—è—Ö–æ–º –¥–æ –≤–∞–≥ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, 
        # –∞–±–æ .pt –¥–ª—è fine-tuning, –∞–±–æ .yaml –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
        model_to_load = resume_path if should_resume else weights_file
        
        try:
            model = YOLO(model_to_load)
            if not should_resume:
                model.model.requires_grad_(True)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ {model_name_str}: {e}")
            return None
        
        model.add_callback("on_pretrain_routine_end", log_stats_callback)
            
        print("\nüöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–º'—è –¥–ª—è –ø–∞–ø–∫–∏ –∑–∞–ø—É—Å–∫—É, —è–∫–µ —î –±–µ–∑–ø–µ—á–Ω–∏–º –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
        run_folder_name = f'{model_name_str.lower().replace(" ", "_").replace("(", "").replace(")", "")}_train_{dt.datetime.now().strftime("%Y%m%d_%H%M%S")}'

        results = model.train(
            data='yolo_config.yaml',
            imgsz=dataset_stats['image_size'][0],
            name=run_folder_name,
            resume=should_resume,
            **self.params
        )

        print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ---")
        print(f"–ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É –ø–∞–ø—Ü—ñ: {results.save_dir}")
        print(f"üìà –õ–æ–≥–∏ –¥–ª—è TensorBoard –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –≤ —Ç—ñ–π —Å–∞–º—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.")

        final_model_path = os.path.join(results.save_dir, "weights", "best.pt")
        final_path = None
        if os.path.exists(final_model_path):
             # –î–∏–Ω–∞–º—ñ—á–Ω–∞ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É, —â–æ –≤–∫–ª—é—á–∞—î —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è
             final_file_name = f"Final-{model_name_str.replace(' ', '_').replace('(', '').replace(')', '')}-best.pt"
             shutil.copy(final_model_path, final_file_name)
             print(f"\n‚úÖ –ù–∞–π–∫—Ä–∞—â—É –º–æ–¥–µ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É —Ñ–∞–π–ª: {final_file_name}")
             final_path = final_file_name
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        summary = {
            "model_name": self._get_model_name(),
            "image_count": dataset_stats.get("image_count", "N/A"),
            "negative_count": dataset_stats.get("negative_count", "N/A"),
            "class_count": dataset_stats.get("class_count", "N/A"),
            "image_size": dataset_stats.get("image_size", "N/A"),
            "best_map": f"{results.results_dict.get('metrics/mAP50-95(B)', 0.0):.4f}",
            "best_model_path": final_path,
            "hyperparameters": self.params
        }
        return summary