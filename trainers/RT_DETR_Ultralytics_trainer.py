import os
import sys
import datetime as dt
import shutil 
from ultralytics import RTDETR
from trainers.trainers import BaseTrainer, log_dataset_statistics_to_tensorboard
import glob
import torch

class UltralyticsDatasetWrapper:
    """–ê–¥–∞–ø—Ç—É—î –¥–∞—Ç–∞—Å–µ—Ç ultralytics –¥–æ —Ñ–æ—Ä–º–∞—Ç—É, —è–∫–∏–π –æ—á—ñ–∫—É—î –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    def __init__(self, ultralytics_dataset):
        self.dataset = ultralytics_dataset
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –¥–µ–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
        imgsz = self.dataset.imgsz
        self.img_h, self.img_w = (imgsz, imgsz) if isinstance(imgsz, int) else (imgsz[0], imgsz[1])

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, idx):
        original_item = self.dataset[idx]
        bboxes_xywhn = original_item['bboxes']
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–∞–º–∫–∏ –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É [x_center, y_center, w, h]
        # —É –ø—ñ–∫—Å–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç [x_min, y_min, x_max, y_max]
        bboxes_xyxy = []
        for bbox in bboxes_xywhn:
            x_center, y_center, w, h = bbox
            x1 = (x_center - w / 2) * self.img_w
            y1 = (y_center - h / 2) * self.img_h
            x2 = (x_center + w / 2) * self.img_w
            y2 = (y_center + h / 2) * self.img_h
            bboxes_xyxy.append([x1, y1, x2, y2])
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ None –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ü—ñ–ª—å —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        return None, {'boxes': torch.tensor(bboxes_xyxy)}

def log_stats_callback(trainer):
    """
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é ultralytics
    –ø—ñ—Å–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–∏—Ö, –∞–ª–µ –¥–æ –ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á–∞–Ω–Ω—è.
    """
    print("\n–í–∏–∫–ª–∏–∫ –∫–æ–ª–±–µ–∫—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç—É...")
    #wrapped_dataset = UltralyticsDatasetWrapper(trainer.train_loader.dataset)
    #log_dataset_statistics_to_tensorboard(wrapped_dataset, trainer.writer)


class RTDETRUltralyticsTrainer(BaseTrainer):
    """–ö–µ—Ä—É—î –ø—Ä–æ—Ü–µ—Å–æ–º –Ω–∞–≤—á–∞–Ω–Ω—è RT-DETR —á–µ—Ä–µ–∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É ultralytics."""

    def __init__(self, training_params, dataset_dir):
        super().__init__(training_params, dataset_dir)
        self.training_mode = None

    def _ask_training_mode(self):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥, —â–æ –∑–∞–ø–∏—Ç—É—î —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è."""
        print("\n   –û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è RT-DETR:")
        print("     1: Fine-tuning (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–≤—á–µ–Ω—ñ –≤–∞–≥–∏ 'rtdetr-l.pt', —à–≤–∏–¥—à–µ, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)")
        print("     2: Full training (–Ω–∞–≤—á–∞—Ç–∏ –º–æ–¥–µ–ª—å –∑ –Ω—É–ª—è, –¥—É–∂–µ –¥–æ–≤–≥–æ)")
        while True:
            choice = input("   –í–∞—à –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É (1 –∞–±–æ 2): ").strip()
            if choice == '1':
                print("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ Fine-tuning.")
                return '_finetune'
            elif choice == '2':
                print("‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ Full training (–∑ –Ω—É–ª—è).")
                return '_full'
            else:
                print("   ‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")

    def _select_training_mode(self):
        """–ó–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Å—É—Ñ—ñ–∫—Å."""
        return self._ask_training_mode()

    def _get_model_name(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –º–æ–¥–µ–ª—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è."""
        if self.training_mode is None:
            return "RT-DETR (Ultralytics)"
        
        mode_name = "Fine-tune" if self.training_mode == '_finetune' else "Full Training"
        return f"RT-DETR (Ultralytics {mode_name})"

    def _check_for_resume(self, project_path):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è –≤ –ø—Ä–æ—î–∫—Ç—ñ.
        –ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —á–µ–∫–ø–æ—ñ–Ω—Ç—É —Ç–∞ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª—é–≤–∞—Ç–∏.
        """
        train_dirs = sorted(glob.glob(os.path.join(project_path, "train*")))
        if not train_dirs:
            return None, False
        
        last_train_dir = train_dirs[-1]
        last_model_path = os.path.join(last_train_dir, "weights", "last.pt")
        
        if os.path.exists(last_model_path):
            print(f"\n‚úÖ –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è: {last_train_dir}")
            answer = input("–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç–æ—á–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è? (y/n): ").strip().lower()
            if answer in ['y', 'yes', '–Ω', '—Ç–∞–∫']:
                print(f"üöÄ –ù–∞–≤—á–∞–Ω–Ω—è –±—É–¥–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É: {last_model_path}")
                return last_model_path, True
        
        print("üóëÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ–≥—Ä–µ—Å –±—É–¥–µ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ. –ù–∞–≤—á–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –∑ –Ω—É–ª—è.")
        return None, False

    def start_or_resume_training(self, dataset_stats):
        if self.training_mode is None:
            self.training_mode = self._select_training_mode()
            
        print(f"\n--- –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è {self._get_model_name()} ---")
        
        project_dir = os.path.join('runs', f'rtdetr_ultralytics{self.training_mode}')
        
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è
        resume_path, should_resume = self._check_for_resume(project_dir)
        
        model_to_load = None
        if should_resume:
            model_to_load = resume_path
            print(f"üîß –ú–æ–¥–µ–ª—å –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è: {model_to_load}")
        else:
            if self.training_mode == '_finetune':
                model_to_load = 'rtdetr-l.pt'
                print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–≤—á–µ–Ω–∏—Ö –≤–∞–≥ 'rtdetr-l.pt'.")
            elif self.training_mode == '_full':
                model_to_load = 'rtdetr-l.yaml'
                print("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –Ω—É–ª—è –∑–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é 'rtdetr-l.yaml'.")

        if model_to_load is None:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —è–∫—É –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏.")
            sys.exit(1)

        # 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥–µ–ª—ñ
        try:
            model = RTDETR(model_to_load)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ –∑ —Ñ–∞–π–ª—É '{model_to_load}': {e}")
            print("‚ÑπÔ∏è –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª 'rtdetr-l.pt' (–¥–ª—è fine-tuning) –∞–±–æ 'rtdetr-l.yaml' (–¥–ª—è full training) —ñ—Å–Ω—É—î —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π.")
            return None
        
        model.add_callback("on_pretrain_routine_end", log_stats_callback)

        self.params['project'] = project_dir
        self.params['name'] = f'train_{dt.datetime.now().strftime("%Y%m%d_%H%M%S")}'
            
        print("\nüöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
        
        # 3. –¢–µ–ø–µ—Ä –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó —á–∏—Å—Ç–∏–π. –í—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∑ –æ–¥–Ω–æ–≥–æ –º—ñ—Å—Ü—è.
        results = model.train(
            data='yolo_config.yaml',
            imgsz=(480, 640), #–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ç–∞–∫ –Ω—ñ–±–∏ –∫—Ä–∞—â–µ
            resume=should_resume,
            **self.params  # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –≤–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        )

        print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ---")
        print(f"–ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É –ø–∞–ø—Ü—ñ: {results.save_dir}")
        print(f"üìà –õ–æ–≥–∏ –¥–ª—è TensorBoard –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –≤ —Ç—ñ–π —Å–∞–º—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.")

        final_model_path = os.path.join(results.save_dir, "weights", "best.pt")
        final_path = None
        if os.path.exists(final_model_path):
            final_name_suffix = "Finetune" if self.training_mode == '_finetune' else "Full"
            final_path = f"Final-RTDETR-Ultralytics-{final_name_suffix}-best.pt"
            shutil.copy(final_model_path, final_path)
            print(f"\n‚úÖ –ù–∞–π–∫—Ä–∞—â—É –º–æ–¥–µ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —É —Ñ–∞–π–ª: {final_path}")

        # –í–∏–¥–∞–ª—è—î–º–æ –∑–º—ñ–Ω–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ self.params, —â–æ–± –≤–æ–Ω–∏ –Ω–µ –≤–ø–ª–∏–≤–∞–ª–∏ –Ω–∞ –∑–≤—ñ—Ç
        clean_hyperparams = self.params.copy()
        clean_hyperparams.pop('project')
        clean_hyperparams.pop('name')

        summary = {
            "model_name": self._get_model_name(),
            "image_count": dataset_stats.get("image_count", "N/A"),
            "negative_count": dataset_stats.get("negative_count", "N/A"),
            "class_count": dataset_stats.get("class_count", "N/A"),
            "image_size": dataset_stats.get("image_size", "N/A"),
            "best_map": f"{results.results_dict.get('metrics/mAP50-95(B)', 0.0):.4f}",
            "best_model_path": final_path,
            "hyperparameters": clean_hyperparams
        }
        return summary