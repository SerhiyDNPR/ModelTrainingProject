import os
import shutil
import json
from glob import glob
from sklearn.model_selection import train_test_split
from tqdm import tqdm
import tkinter as tk
from tkinter import filedialog
from collections import defaultdict
from converters.converters import BaseDataConverter, remove_readonly

class ResNetDataConverter(BaseDataConverter):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –¥–∞–Ω—ñ –∑ Unity Perception —É —Ñ–æ—Ä–º–∞—Ç ImageFolder –¥–ª—è ResNet."""

    def prepare_data(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥, —â–æ –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –¥–ª—è ResNet."""
        print("\n--- –†–æ–∑–ø–æ—á–∞—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç ResNet (ImageFolder) ---")
        
        if self.output_dir.exists():
            print(f"üßπ –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {self.output_dir}")
            shutil.rmtree(self.output_dir, onerror=remove_readonly)

        source_dirs = sorted([p for p in self.source_dir.glob("solo*") if p.is_dir()], key=self._natural_sort_key)
        if not source_dirs:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 'solo*' –∑–∞ —à–ª—è—Ö–æ–º '{self.source_dir}'")
            return

        annotated_dirs = source_dirs[:-1] if len(source_dirs) > 1 else source_dirs
        negative_dir = source_dirs[-1] if len(source_dirs) > 1 else None

        # 1. –ó–±—ñ—Ä –≤—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å, —ó—Ö –∫–ª–∞—Å—ñ–≤ —Ç–∞ —Ä–æ–∑–º—ñ—Ä—É
        all_image_pairs, imgsz = self._get_image_class_pairs(annotated_dirs, negative_dir) # <-- –ó–ú–Ü–ù–ê 1
        if not all_image_pairs:
            print("–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
            return

        # 2. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤
        class_names = sorted(list(set(pair['class_name'] for pair in all_image_pairs)))
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(class_names)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤: {class_names}")

        # 3. –†–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö –Ω–∞ –Ω–∞–≤—á–∞–ª—å–Ω—É, –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω—É —Ç–∞ —Ç–µ—Å—Ç–æ–≤—É –≤–∏–±—ñ—Ä–∫–∏
        labels = [item['class_name'] for item in all_image_pairs]
        try:
            # –°—Ç—Ä–∞—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó –∫–ª–∞—Å—ñ–≤
            train_val_files, test_files = train_test_split(all_image_pairs, test_size=0.1, random_state=42, stratify=labels)
            train_labels = [item['class_name'] for item in train_val_files]
            train_files, val_files = train_test_split(train_val_files, test_size=0.111, random_state=42, stratify=train_labels) # 0.111 * 0.9 = ~0.1
        except ValueError:
            # –Ø–∫—â–æ –∫–ª–∞—Å—ñ–≤ –∑–∞–º–∞–ª–æ –¥–ª—è —Å—Ç—Ä–∞—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, —Ä–æ–±–∏–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª
            print("‚ö†Ô∏è –£–≤–∞–≥–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —Å—Ç—Ä–∞—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–≤–∏—á–∞–π–Ω–∏–π.")
            train_val_files, test_files = train_test_split(all_image_pairs, test_size=0.1, random_state=42)
            train_files, val_files = train_test_split(train_val_files, test_size=0.111, random_state=42)

        splits = {"train": train_files, "val": val_files, "test": test_files}

        # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫ —Ç–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        self._create_imagefolder_structure(splits, class_names)
        
        # 5. –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_counts = self._calculate_stats(splits)
        print("\n--- ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ---")
        print(f"–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞: {stats_counts['train']['total']} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print(f"–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞: {stats_counts['val']['total']} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print(f"–¢–µ—Å—Ç–æ–≤–∞ –≤–∏–±—ñ—Ä–∫–∞:    {stats_counts['test']['total']} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print("-----------------------------------------")
        print(f"üéâ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å —É –≤–∏–±—ñ—Ä–∫–∞—Ö: {stats_counts['total_unique_images']}")
        print(f"(–ü—Ä–∏–º—ñ—Ç–∫–∞: –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–æ—é –∑–∞ —Å—É–º—É, —è–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∞—Ç—å –∫—ñ–ª—å–∫–æ–º –∫–ª–∞—Å–∞–º)")

        # 6. –î–æ–¥–∞–≤–∞–Ω–Ω—è Hard Negatives
        self._add_hard_negatives_resnet()

        print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è ResNet —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {self.output_dir.resolve()}")
        
        stats = {
            "image_size": imgsz,
            "image_count": stats_counts['total_unique_images'],
            "negative_count": sum(1 for item in all_image_pairs if item['class_name'] == 'background'),
            "class_count": len(class_names)
        }
        return stats

    def get_image_dimensions(self):
        """
        –®–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î –≤ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö,
        –∞ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î - –≤ –≤–∏—Ö—ñ–¥–Ω–∏—Ö.
        """
        # --- –°–ø—Ä–æ–±–∞ 1: –ü–æ—à—É–∫ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó (—à–≤–∏–¥—à–∏–π —Å–ø–æ—Å—ñ–±) ---
        print(f"üîç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ —Ä–∞–Ω—ñ—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É '{self.output_dir}'...")
        
        try:
            from PIL import Image
        except ImportError:
            print("\n‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –î–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∑ —Ñ–∞–π–ª—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Pillow.")
            print("   –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó: pip install Pillow")
            print("   –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—à—É–∫—É —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö JSON-—Ñ–∞–π–ª–∞—Ö...")
        else:
            search_dirs = [
                self.output_dir / "train",
                self.output_dir / "val",
                self.output_dir / "test"
            ]
            for directory in search_dirs:
                if not directory.exists():
                    continue
                try:
                    # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –±—É–¥—å-—è–∫—ñ–π –ø—ñ–¥–ø–∞–ø—Ü—ñ –∫–ª–∞—Å—É
                    image_path = next(directory.glob("*/*.[jp][pn]g"))
                    with Image.open(image_path) as img:
                        width, height = img.size
                        print(f"‚úÖ –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ: {width}x{height} (–∑ —Ñ–∞–π–ª—É {image_path.name})")
                        return (width, height)
                except (StopIteration, OSError):
                    continue
        
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ '{self.output_dir}'. –°–ø—Ä–æ–±–∞ –ø–æ—à—É–∫—É —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")

        # --- –°–ø—Ä–æ–±–∞ 2: –ü–æ—à—É–∫ —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–∑ JSON) ---
        source_dirs_list = [p for p in self.source_dir.glob("solo*") if p.is_dir()]
        if not source_dirs_list:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ 'solo*' –≤ {self.source_dir}")
            return None

        for directory in source_dirs_list:
            try:
                frame_data_path = next(directory.glob("sequence.*/step0.frame_data.json"))
                with open(frame_data_path) as f:
                    frame_data = json.load(f)
                
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                img_w, img_h = capture.get("dimension", [None, None])

                if img_w and img_h:
                    print(f"‚úÖ –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ –∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {img_w}x{img_h}")
                    return (int(img_w), int(img_h))
            except (StopIteration, json.JSONDecodeError, KeyError):
                continue
        
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω—ñ –∑ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö, –∞–Ω—ñ –∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.")
        return None

    def _get_image_class_pairs(self, annotated_dirs, negative_dir):
        """–ó–±–∏—Ä–∞—î –ø–∞—Ä–∏ (—à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –Ω–∞–∑–≤–∞ –∫–ª–∞—Å—É) –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª."""
        image_class_pairs = []
        imgsz = None # <-- –ó–ú–Ü–ù–ê 3
        
        print("\nüîé –ó–±—ñ—Ä —Ç–∞ –∞–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤ –∑ –∞–Ω–æ—Ç–∞—Ü—ñ—è–º–∏...")
        for directory in tqdm(annotated_dirs, desc="–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤", unit="–ø–∞–ø–∫–∞"):
            json_files = [p.parent / "step0.frame_data.json" for p in directory.glob("sequence.*/step0.camera.png") if (p.parent / "step0.frame_data.json").exists()]
            for json_path in json_files:
                img_path = json_path.parent / "step0.camera.png"
                with open(json_path) as f:
                    frame_data = json.load(f)
                
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                
                # --> –ó–ú–Ü–ù–ê 4: –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑)
                if imgsz is None and capture.get("dimension"):
                    img_w, img_h = capture["dimension"]
                    imgsz = (int(img_w), int(img_h))
                # <--
                
                annotations_list = frame_data.get("annotations", capture.get("annotations", []))
                
                found_classes = set()
                for annotation in annotations_list:
                    if "BoundingBox2DAnnotation" in annotation.get("@type", ""):
                        for value in annotation.get("values", []):
                            label_name = value.get("label_name") or value.get("labelName")
                            if label_name:
                                found_classes.add(label_name)
                
                if found_classes:
                    for class_name in found_classes:
                        image_class_pairs.append({"img_path": img_path, "class_name": class_name})
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(image_class_pairs)} –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∞–Ω–æ—Ç–∞—Ü—ñ–π.")

        if negative_dir:
            print("üîé –ó–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤ –∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏...")
            all_negative_files = [p for p in negative_dir.glob("sequence.*/step0.camera.png")]
            for img_path in tqdm(all_negative_files, desc="–ê–Ω–∞–ª—ñ–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"):
                image_class_pairs.append({"img_path": img_path, "class_name": "background"})
            print(f"–î–æ–¥–∞–Ω–æ {len(all_negative_files)} –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –¥–æ –∫–ª–∞—Å—É 'background'.")
            
        return image_class_pairs, imgsz # <-- –ó–ú–Ü–ù–ê 5

    def _create_imagefolder_structure(self, splits, class_names):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —ñ –∫–æ–ø—ñ—é—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
        print("\nüì¶ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ ImageFolder...")
        
        for split_name, files in splits.items():
            split_dir = self.output_dir / split_name
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É
            for class_name in class_names:
                (split_dir / class_name).mkdir(parents=True, exist_ok=True)
            
            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏
            for item in tqdm(files, desc=f"–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è '{split_name}'", unit="file"):
                img_path = item['img_path']
                class_name = item['class_name']
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
                parent_folder_name = img_path.parent.parent.name
                sequence_folder_name = img_path.parent.name
                unique_base_name = f"{parent_folder_name}_{sequence_folder_name}.png"
                
                dest_path = split_dir / class_name / unique_base_name
                shutil.copy(img_path, dest_path)

    def _add_hard_negatives_resnet(self):
        """–î–æ–¥–∞—î '—Å–∫–ª–∞–¥–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ' –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏."""
        answer = input("\n–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏? (y/n): ").strip().lower()
        if answer not in ['y', 'Y', '–Ω', '–ù']:
            print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Hard Negative –ø—Ä–∏–∫–ª–∞–¥—ñ–≤.")
            return

        root = tk.Tk()
        root.withdraw()
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏...")
        hard_negatives_dir = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏")
        if not hard_negatives_dir:
            print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            return

        # –¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞ - train/background
        train_background_dir = self.output_dir / "train" / "background"
        train_background_dir.mkdir(parents=True, exist_ok=True) # –°—Ç–≤–æ—Ä—é—î–º–æ, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î

        hn_images = glob(os.path.join(hard_negatives_dir, "*.jpg")) + glob(os.path.join(hard_negatives_dir, "*.png"))
        if not hn_images:
            print("‚ö†Ô∏è –£ –≤–∫–∞–∑–∞–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å (.jpg –∞–±–æ .png).")
            return
            
        print(f"–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è {len(hn_images)} Hard Negative —Ñ–∞–π–ª—ñ–≤ –¥–æ '{train_background_dir}'...")
        for img_path in tqdm(hn_images, desc="Hard Negatives", unit="file"):
            shutil.copy(img_path, train_background_dir / os.path.basename(img_path))
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {len(hn_images)} —Ñ–∞–π–ª—ñ–≤ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏ (–∫–ª–∞—Å 'background').")

    def _calculate_stats(self, splits):
        """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ —É –∫–æ–∂–Ω—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ."""
        stats = defaultdict(lambda: {'total': 0, 'files': set()})
        unique_images = set()

        for split_name, files in splits.items():
            stats[split_name]['total'] = len(files)
            for item in files:
                unique_images.add(item['img_path'])
        
        stats['total_unique_images'] = len(unique_images)
        return stats