import os
import shutil
import json
from glob import glob
from sklearn.model_selection import train_test_split
from tqdm import tqdm
import yaml
import tkinter as tk
from tkinter import filedialog
from PIL import Image
from collections import defaultdict
from converters.converters import BaseDataConverter, remove_readonly

class YOLODataConverter(BaseDataConverter):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –¥–∞–Ω—ñ –∑ Unity Perception —É —Ñ–æ—Ä–º–∞—Ç YOLO."""
    def prepare_data(self):
        print("\n--- –†–æ–∑–ø–æ—á–∞—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç YOLO ---")
        
        if self.output_dir.exists():
            print(f"üßπ –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {self.output_dir}")
            shutil.rmtree(self.output_dir, onerror=remove_readonly)

        source_dirs = sorted([p for p in self.source_dir.glob("solo*") if p.is_dir()], key=self._natural_sort_key)
        if not source_dirs:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 'solo*' –∑–∞ —à–ª—è—Ö–æ–º '{self.source_dir}'")
            return

        images_dir = self.output_dir / "images"
        labels_dir = self.output_dir / "labels"
        for subset in ["train", "val", "test"]:
            (images_dir / subset).mkdir(parents=True, exist_ok=True)
            (labels_dir / subset).mkdir(parents=True, exist_ok=True)

        annotated_dirs = source_dirs[:-1] if len(source_dirs) > 1 else source_dirs
        negative_dir = source_dirs[-1] if len(source_dirs) > 1 else None
        
        print("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
        class_names = self._discover_classes(annotated_dirs)
        class_map = {name: i for i, name in enumerate(class_names)}
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(class_names)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤: {class_names}")

        positive_examples = []
        negative_examples = []

        imgsz = self._copy_annotated_images(annotated_dirs, class_map, positive_examples)
        negative_count = self._copy_negative_examples(negative_dir, negative_examples)
        train_files, test_files, val_files = self._format_yolo_training_set(images_dir, labels_dir, positive_examples, negative_examples)
        
        # --- –î–û–î–ê–ù–û: –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
        total_train = len(train_files)
        total_val = len(val_files)
        total_test = len(test_files)
        total_images = total_train + total_val + total_test
        print("\n--- ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ---")
        print(f"–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞: {total_train} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print(f"–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞: {total_val} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print(f"–¢–µ—Å—Ç–æ–≤–∞ –≤–∏–±—ñ—Ä–∫–∞:    {total_test} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        print("-----------------------------------------")
        print(f"üéâ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å: {total_images}")

        self._add_hard_negatives()

        # ----------------------------------------
        print("\nüì¶ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–æ—Ç–∞—Ü—ñ–π...")
        print("üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó 'yolo_config.yaml'...")
        self._create_yaml_config(class_names)
        
        print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è YOLO —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        stats = {
            "image_size": imgsz,
            "image_count": total_images,
            "negative_count": negative_count,
            "class_count": len(class_names)
        }
        return stats

    def _copy_negative_examples(self, negative_dir, negative_examples):
        if not negative_dir:
            return 0
        print("üîé –ó–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤ –∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏...")
        all_negative_files = [p for p in negative_dir.glob("sequence.*/step0.camera.png")]
        for img_path in tqdm(all_negative_files, desc="–ê–Ω–∞–ª—ñ–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"):
            negative_examples.append({"img_path": img_path, "annotations": []})
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(negative_examples)} –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤.")
        return len(all_negative_files)

    def _format_yolo_training_set(self, images_dir, labels_dir, positive_examples, negative_examples):
        train_files, test_files = train_test_split(positive_examples, test_size=0.2, random_state=42)
        val_files, test_files = train_test_split(test_files, test_size=0.5, random_state=42)
        
        train_files.extend(negative_examples)
        
        splits = {"train": train_files, "val": val_files, "test": test_files}

        print("\nüì¶ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É...")
        for split_name, files in splits.items():
            img_dest_dir = images_dir / split_name
            lbl_dest_dir = labels_dir / split_name
            
            for item in tqdm(files, desc=f"–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è '{split_name}'", unit="file"):
                parent_folder_name = item['img_path'].parent.parent.name
                sequence_folder_name = item['img_path'].parent.name
                unique_base_name = f"{parent_folder_name}_{sequence_folder_name}"
                
                shutil.copy(item['img_path'], img_dest_dir / f"{unique_base_name}.png")

                label_filepath = lbl_dest_dir / f"{unique_base_name}.txt"
                with open(label_filepath, "w") as f_label:
                    if item['annotations']:
                        f_label.write("\n".join(item['annotations']))
        return train_files,test_files,val_files

    def _copy_annotated_images(self, annotated_dirs, class_map, positive_examples):
        imgsz = None
        print("\nüîé –ó–±—ñ—Ä —Ç–∞ –∞–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤ –∑ –∞–Ω–æ—Ç–∞—Ü—ñ—è–º–∏...")
        for directory in tqdm(annotated_dirs, desc="–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤", unit="–ø–∞–ø–∫–∞"):
            all_files = sorted(
                [(p.parent / "step0.frame_data.json", p.parent / "step0.camera.png")
                for p in directory.glob("sequence.*/step0.camera.png") if (p.parent / "step0.frame_data.json").exists()],
                key=lambda x: int(x[1].parent.name.split('.')[-1])
            )
            
            print(f"   -> –í –ø–∞–ø—Ü—ñ '{directory.name}' –∑–Ω–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª—ñ–≤ –∑ —Ä–æ–∑–º—ñ—Ç–∫–æ—é.")

            for json_path, img_path in all_files:
                with open(json_path) as f:
                    frame_data = json.load(f)
                
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                if capture.get("dimension"):
                    img_w, img_h = capture["dimension"]
                    if imgsz is None:
                        imgsz = (int(img_w), int(img_h))
                
                yolo_annotations = []
                annotations_list = frame_data.get("annotations", capture.get("annotations", []))
                for annotation in annotations_list:
                    if "BoundingBox2DAnnotation" in annotation.get("@type", ""):
                        for value in annotation.get("values", []):
                            class_name = value.get("label_name") or value.get("labelName")
                            class_id = class_map.get(class_name)
                            if class_id is None: continue
                            
                            px_x, px_y = value["origin"]
                            px_w, px_h = value["dimension"]
                            x_center_norm = (px_x + px_w / 2) / img_w
                            y_center_norm = (px_y + px_h / 2) / img_h
                            width_norm = px_w / img_w
                            height_norm = px_h / img_h
                            yolo_annotations.append(f"{class_id} {x_center_norm:.6f} {y_center_norm:.6f} {width_norm:.6f} {height_norm:.6f}")
                
                if yolo_annotations:
                    positive_examples.append({"img_path": img_path, "annotations": yolo_annotations})

        print(f"\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(positive_examples)} –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑ –∞–Ω–æ—Ç–∞—Ü—ñ—è–º–∏.")
        return imgsz

    def _discover_classes(self, annotated_dirs):
        """–°–∫–∞–Ω—É—î –≤—Å—ñ JSON-—Ñ–∞–π–ª–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ –∫–ª–∞—Å—ñ–≤ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        print("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ —Ç–∞ –∑–±—ñ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö Perception...")
        class_names = set()
        
        stats_dir = self.output_dir / "statistics"
        stats_dir.mkdir(parents=True, exist_ok=True)
        
        for directory in tqdm(annotated_dirs, desc="–ü–æ—à—É–∫ –∫–ª–∞—Å—ñ–≤", unit="–ø–∞–ø–∫–∞"):
            dir_stats = defaultdict(list)
            
            json_files = [p.parent / "step0.frame_data.json" for p in directory.glob("sequence.*/step0.camera.png") if (p.parent / "step0.frame_data.json").exists()]
            for frame_file in json_files:
                with open(frame_file) as f:
                    frame_data = json.load(f)
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                annotations_list = frame_data.get("annotations", capture.get("annotations", []))
                for annotation in annotations_list:
                    if "BoundingBox2DAnnotation" in annotation.get("@type", ""):
                        for value in annotation.get("values", []):
                            label_name = value.get("label_name") or value.get("labelName")
                            if label_name:
                                class_names.add(label_name)
                                px_w, px_h = value["dimension"]
                                dir_stats[label_name].append((px_w, px_h))
            
            if dir_stats:
                stats_output = [f"--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó '{directory.name}': ---"]
                for class_name, sizes in sorted(dir_stats.items()):
                    if sizes:
                        avg_w = sum(w for w, h in sizes) / len(sizes)
                        avg_h = sum(h for w, h in sizes) / len(sizes)
                        stats_output.append(f"     - –ö–ª–∞—Å: '{class_name}', –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {avg_w:.2f}x{avg_h:.2f} –ø—ñ–∫—Å–µ–ª—ñ–≤ ({len(sizes)} –æ–±'—î–∫—Ç—ñ–≤)")
                stats_output.append("   -------------------------------------------------")
                
                print("\n" + "\n".join(stats_output))
                
                stats_filename = stats_dir / f"stats_{directory.name}.txt"
                with open(stats_filename, 'w', encoding='utf-8') as f_stat:
                    f_stat.write("\n".join(stats_output))
                print(f"     üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: {stats_filename}")

        sorted_names = sorted(list(class_names))
        print(f"\n‚úÖ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ {len(sorted_names)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤: {sorted_names}")
        return sorted_names

    def _create_yaml_config(self, class_names):
        """–°—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è YOLO."""
        config_data = {
            'path': str(self.output_dir.resolve()),
            'train': 'images/train',
            'val': 'images/val',
            'test': 'images/test',
            'nc': len(class_names),
            'names': class_names,
        }
        with open('yolo_config.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(config_data, f, sort_keys=False, allow_unicode=True)

    def _add_hard_negatives(self):
        """–î–æ–¥–∞—îmo '—Å–∫–ª–∞–¥–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ' –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏."""
        answer = input("\n–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏? (y/n): ").strip().lower()
        if answer not in ['y', 'Y', '–Ω', '–ù']:
            print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Hard Negative –ø—Ä–∏–∫–ª–∞–¥—ñ–≤.")
            return

        root = tk.Tk()
        root.withdraw()
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏...")
        hard_negatives_dir = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏")
        if not hard_negatives_dir:
            print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            return

        train_images_dir = os.path.join(self.output_dir, "images", "train")
        train_labels_dir = os.path.join(self.output_dir, "labels", "train")
        hn_images = glob(os.path.join(hard_negatives_dir, "*.jpg")) + glob(os.path.join(hard_negatives_dir, "*.png"))
        if not hn_images:
            print("‚ö†Ô∏è –£ –≤–∫–∞–∑–∞–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å (.jpg –∞–±–æ .png).")
            return
            
        print(f"–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è {len(hn_images)} Hard Negative —Ñ–∞–π–ª—ñ–≤...")
        for img_path in tqdm(hn_images, desc="Hard Negatives", unit="file"):
            shutil.copy(img_path, os.path.join(train_images_dir, os.path.basename(img_path)))
            base_name, _ = os.path.splitext(os.path.basename(img_path))
            open(os.path.join(train_labels_dir, f"{base_name}.txt"), 'w').close()
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {len(hn_images)} —Ñ–∞–π–ª—ñ–≤ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏.")

    def get_image_dimensions(self):
        """
        –®–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ–∑–º—ñ—Ä–∏ –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ **–∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ–π** –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
        –¶–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∫–æ–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –ø—Ä–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.
        """
        print(f"üîç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ —Ä–∞–Ω—ñ—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É '{self.output_dir}'...")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –¥–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (train, val, test)
        search_dirs = [
            self.output_dir / "images" / "train",
            self.output_dir / "images" / "val",
            self.output_dir / "images" / "test"
        ]

        for directory in search_dirs:
            if not directory.exists():
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ —ñ—Å–Ω—É—î

            try:
                # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ-–ª—ñ–ø—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (.png –∞–±–æ .jpg)
                image_path = next(directory.glob("*.[jp][pn]g"))
                with Image.open(image_path) as img:
                    width, height = img.size
                    print(f"‚úÖ –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ: {width}x{height} (–∑ —Ñ–∞–π–ª—É {image_path.name})")
                    return (width, height)
            except StopIteration:
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫ —É –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –ø–∞–ø—Ü—ñ, —è–∫—â–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                continue
        
        print(f"‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è—Ö '{self.output_dir / 'images'}'.")
        print("   –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –¥–∞–Ω—ñ –±—É–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ —Ä–∞–Ω—ñ—à–µ —ñ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ.")
        return None
