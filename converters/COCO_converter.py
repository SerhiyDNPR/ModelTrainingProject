import os
import shutil
import json
from pathlib import Path
from glob import glob
from sklearn.model_selection import train_test_split
from tqdm import tqdm
import tkinter as tk
from tkinter import filedialog
import collections

def remove_readonly(func, path, _):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ª–∏—à–µ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è."""
    os.chmod(path, 0o777)
    func(path)

class COCODataConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –¥–∞–Ω—ñ –∑ Unity Perception —É —Ñ–æ—Ä–º–∞—Ç COCO, —Å—É–º—ñ—Å–Ω–∏–π –∑ DETR."""
    
    def __init__(self, source_dir: str, output_dir: str):
        self.source_dir = Path(source_dir)
        self.output_dir = Path(output_dir)
        if not self.source_dir.exists():
            raise FileNotFoundError(f"–í–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {self.source_dir}")

    def _natural_sort_key(self, s):
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è."""
        import re
        return [int(text) if text.isdigit() else text.lower() for text in re.split('([0-9]+)', str(s))]
    
    def get_image_dimensions(self):
        """
        –®–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î –≤ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö,
        –∞ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î - –≤ –≤–∏—Ö—ñ–¥–Ω–∏—Ö.
        """
        print(f"üîç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ —Ä–∞–Ω—ñ—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É '{self.output_dir}'...")
        
        try:
            from PIL import Image
        except ImportError:
            print("\n‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –î–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∑ —Ñ–∞–π–ª—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Pillow.")
            print("   –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó: pip install Pillow")
            print("   –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—à—É–∫—É —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö JSON-—Ñ–∞–π–ª–∞—Ö...")
        else:
            search_dirs = [self.output_dir / "train", self.output_dir / "val"]
            for directory in search_dirs:
                if not directory.exists():
                    continue
                try:
                    # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ-–ª—ñ–ø—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    image_path = next(directory.glob("*.*"))
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Å–ø—Ä–∞–≤–¥—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    if image_path.suffix.lower() in ['.png', '.jpg', '.jpeg']:
                        with Image.open(image_path) as img:
                            width, height = img.size
                            print(f"‚úÖ –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ: {width}x{height} (–∑ —Ñ–∞–π–ª—É {image_path.name})")
                            return (width, height)
                except (StopIteration, OSError):
                    continue
        
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ '{self.output_dir}'. –°–ø—Ä–æ–±–∞ –ø–æ—à—É–∫—É —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")

        # --- –°–ø—Ä–æ–±–∞ 2: –ü–æ—à—É–∫ —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–∑ JSON) ---
        source_dirs_list = [p for p in self.source_dir.glob("solo*") if p.is_dir()]
        if not source_dirs_list:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ 'solo*' –≤ {self.source_dir}")
            return None

        for directory in source_dirs_list:
            try:
                frame_data_path = next(directory.glob("sequence.*/step0.frame_data.json"))
                with open(frame_data_path) as f:
                    frame_data = json.load(f)
                
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                img_w, img_h = capture.get("dimension", [None, None])

                if img_w and img_h:
                    print(f"‚úÖ –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ –∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {img_w}x{img_h}")
                    return (img_w, img_h)
            except (StopIteration, json.JSONDecodeError, KeyError):
                continue
        
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω—ñ –∑ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö, –∞–Ω—ñ –∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.")
        return None


    def prepare_data(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Ü–µ—Å—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó."""
        print("\n--- –†–æ–∑–ø–æ—á–∞—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç COCO (–¥–ª—è DETR) ---")

        if self.output_dir.exists():
            print(f"üßπ –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {self.output_dir}")
            shutil.rmtree(self.output_dir, onerror=remove_readonly)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫
        self.train_dir = self.output_dir / "train"
        self.val_dir = self.output_dir / "val"
        self.annotations_dir = self.output_dir / "annotations"
        self.train_dir.mkdir(parents=True, exist_ok=True)
        self.val_dir.mkdir(parents=True, exist_ok=True)
        self.annotations_dir.mkdir(parents=True, exist_ok=True)

        source_dirs = sorted([p for p in self.source_dir.glob("solo*") if p.is_dir()], key=self._natural_sort_key)
        if not source_dirs:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 'solo*' –∑–∞ —à–ª—è—Ö–æ–º '{self.source_dir}'")
            return None

        annotated_dirs = source_dirs[:-1] if len(source_dirs) > 1 else source_dirs
        negative_dir = source_dirs[-1] if len(source_dirs) > 1 else None

        # 1. –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤
        print("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
        class_names = self._discover_classes(annotated_dirs)
        categories = [{"id": i, "name": name, "supercategory": "object"} for i, name in enumerate(class_names, 1)]
        class_map = {name: i for i, name in enumerate(class_names, 1)}
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(class_names)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤: {class_names}")

        # 2. –ó–±—ñ—Ä —É—Å—ñ—Ö –¥–∞–Ω–∏—Ö
        all_examples = []
        self._gather_annotated_data(annotated_dirs, class_map, all_examples)
        negative_files_count = self._gather_negative_data(negative_dir, all_examples)

        # 3. –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—É —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω—É –≤–∏–±—ñ—Ä–∫–∏
        if not all_examples:
            print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")
            return None
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø–µ—Ä—à–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É
        image_size = (all_examples[0]['width'], all_examples[0]['height'])
            
        train_data, val_data = train_test_split(all_examples, test_size=0.2, random_state=42)
        print(f"\nüìä –†–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö: {len(train_data)} –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, {len(val_data)} –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.")

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è '—Å–∫–ª–∞–¥–Ω–∏—Ö –Ω–µ–≥–∞—Ç–∏–≤—ñ–≤' –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏
        self._add_hard_negatives(train_data)

        # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è COCO JSON —Ñ–∞–π–ª—ñ–≤
        print("\nüì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∞–Ω–æ—Ç–∞—Ü—ñ–π —É —Ñ–æ—Ä–º–∞—Ç—ñ COCO...")
        self._create_coco_json(train_data, self.train_dir, self.annotations_dir / "instances_train.json", categories)
        self._create_coco_json(val_data, self.val_dir, self.annotations_dir / "instances_val.json", categories)
        
        print("\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è DETR —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        stats = {
            "image_size": image_size,
            "image_count": len(all_examples),
            "negative_count": negative_files_count,
            "class_count": len(class_names)
        }
        return stats


    def _discover_classes(self, annotated_dirs):
        """–°–∫–∞–Ω—É—î –≤—Å—ñ JSON-—Ñ–∞–π–ª–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ –∫–ª–∞—Å—ñ–≤ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        print("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ —Ç–∞ –∑–±—ñ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö Perception...")
        class_names = set()
        
        stats_dir = self.output_dir / "statistics"
        stats_dir.mkdir(parents=True, exist_ok=True)

        for directory in tqdm(annotated_dirs, desc="–ü–æ—à—É–∫ –∫–ª–∞—Å—ñ–≤", unit="–ø–∞–ø–∫–∞"):
            dir_stats = collections.defaultdict(list)
            
            json_files = [p.parent / "step0.frame_data.json" for p in directory.glob("sequence.*/step0.camera.png") if (p.parent / "step0.frame_data.json").exists()]
            for frame_file in json_files:
                with open(frame_file) as f:
                    frame_data = json.load(f)
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                annotations_list = frame_data.get("annotations", capture.get("annotations", []))
                for annotation in annotations_list:
                    if "BoundingBox2DAnnotation" in annotation.get("@type", ""):
                        for value in annotation.get("values", []):
                            label_name = value.get("label_name") or value.get("labelName")
                            if label_name:
                                class_names.add(label_name)
                                px_w, px_h = value["dimension"]
                                dir_stats[label_name].append((px_w, px_h))
            
            if dir_stats:
                stats_output = [f"--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó '{directory.name}': ---"]
                for class_name, sizes in sorted(dir_stats.items()):
                    if sizes:
                        avg_w = sum(w for w, h in sizes) / len(sizes)
                        avg_h = sum(h for w, h in sizes) / len(sizes)
                        stats_output.append(f"     - –ö–ª–∞—Å: '{class_name}', –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {avg_w:.2f}x{avg_h:.2f} –ø—ñ–∫—Å–µ–ª—ñ–≤ ({len(sizes)} –æ–±'—î–∫—Ç—ñ–≤)")
                stats_output.append("   -------------------------------------------------")

                print("\n" + "\n".join(stats_output))

                stats_filename = stats_dir / f"stats_{directory.name}.txt"
                with open(stats_filename, 'w', encoding='utf-8') as f_stat:
                    f_stat.write("\n".join(stats_output))
                print(f"     üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: {stats_filename}")
        
        sorted_names = sorted(list(class_names))
        print(f"\n‚úÖ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ {len(sorted_names)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤: {sorted_names}")
        return sorted_names

    def _gather_annotated_data(self, annotated_dirs, class_map, all_examples):
        """–ó–±–∏—Ä–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –∞–Ω–æ—Ç–æ–≤–∞–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π."""
        print("\nüîé –ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤...")
        for directory in tqdm(annotated_dirs, desc="–û–±—Ä–æ–±–∫–∞ –ø–∞–ø–æ–∫", unit="–ø–∞–ø–∫–∞"):
            all_files = sorted(
                [(p.parent / "step0.frame_data.json", p.parent / "step0.camera.png")
                for p in directory.glob("sequence.*/step0.camera.png") if (p.parent / "step0.frame_data.json").exists()],
                key=lambda x: int(x[1].parent.name.split('.')[-1])
            )
            for json_path, img_path in all_files:
                with open(json_path) as f:
                    frame_data = json.load(f)
                
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                img_w, img_h = capture.get("dimension", [0, 0])
                
                annotations = []
                annotations_list = frame_data.get("annotations", capture.get("annotations", []))
                for annotation in annotations_list:
                    if "BoundingBox2DAnnotation" in annotation.get("@type", ""):
                        for value in annotation.get("values", []):
                            class_name = value.get("label_name") or value.get("labelName")
                            class_id = class_map.get(class_name)
                            if class_id is None: continue
                            
                            px_x, px_y = value["origin"]
                            px_w, px_h = value["dimension"]
                            
                            annotations.append({
                                "category_id": class_id,
                                "bbox": [float(px_x), float(px_y), float(px_w), float(px_h)]
                            })
                
                if annotations:
                    all_examples.append({
                        "img_path": img_path,
                        "width": img_w,
                        "height": img_h,
                        "annotations": annotations
                    })
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(all_examples)} –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑ –∞–Ω–æ—Ç–∞—Ü—ñ—è–º–∏.")

    def _gather_negative_data(self, negative_dir, all_examples):
        """–ó–±–∏—Ä–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ (–±–µ–∑ –∞–Ω–æ—Ç–∞—Ü—ñ–π)."""
        if not negative_dir:
            return 0
        
        print("\nüîé –ê–Ω–∞–ª—ñ–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤...")
        negative_files = [p for p in negative_dir.glob("sequence.*/step0.camera.png")]
        for img_path in tqdm(negative_files, desc="–û–±—Ä–æ–±–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤—ñ–≤", unit="file"):
            # –î–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
            # –Ø–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ, —ó—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –æ—Ç—Ä–∏–º–∞—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ Pillow.
            # –¢—É—Ç –º–∏ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É.
            # –Ø–∫—â–æ –Ω—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞.
            # –£ —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ –º–∏ –±–µ—Ä–µ–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É,
            # –∞–ª–µ –∫—Ä–∞—â–µ –±—É–ª–æ –± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏.
            last_dims = (all_examples[-1]['width'], all_examples[-1]['height']) if all_examples else (1920, 1080)

            all_examples.append({
                "img_path": img_path,
                "width": last_dims[0],
                "height": last_dims[1],
                "annotations": [] # –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–æ—Ç–∞—Ü—ñ–π
            })
        print(f"–î–æ–¥–∞–Ω–æ {len(negative_files)} –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤.")
        return len(negative_files)

    def _add_hard_negatives(self, train_data):
        """–î–æ–¥–∞—î '—Å–∫–ª–∞–¥–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ' –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏."""
        answer = input("\n–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏? (y/n): ").strip().lower()
        if answer not in ['y', 'yes', '–Ω', '—Ç–∞–∫']:
            print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Hard Negative –ø—Ä–∏–∫–ª–∞–¥—ñ–≤.")
            return

        root = tk.Tk()
        root.withdraw()
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏...")
        hard_negatives_dir = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏")
        
        if not hard_negatives_dir:
            print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            return

        hn_images = glob(os.path.join(hard_negatives_dir, "*.jpg")) + glob(os.path.join(hard_negatives_dir, "*.png"))
        if not hn_images:
            print("‚ö†Ô∏è –£ –≤–∫–∞–∑–∞–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å (.jpg –∞–±–æ .png).")
            return
            
        print(f"–î–æ–¥–∞–≤–∞–Ω–Ω—è {len(hn_images)} Hard Negative —Ñ–∞–π–ª—ñ–≤...")
        # –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ—Ç—Ä—ñ–±–µ–Ω Pillow
        try:
            from PIL import Image
        except ImportError:
            print("\n–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –î–ª—è –æ–±—Ä–æ–±–∫–∏ Hard Negatives –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Pillow.")
            print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—ó: pip install Pillow")
            return

        for img_path in tqdm(hn_images, desc="Hard Negatives", unit="file"):
            img_path = Path(img_path)
            with Image.open(img_path) as img:
                width, height = img.size
            
            train_data.append({
                "img_path": img_path,
                "width": width,
                "height": height,
                "annotations": []
            })
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {len(hn_images)} —Ñ–∞–π–ª—ñ–≤ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏.")

    def _create_coco_json(self, data, dest_img_dir, json_path, categories):
        """–°—Ç–≤–æ—Ä—é—î —î–¥–∏–Ω–∏–π JSON-—Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ COCO –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –¥–∞–Ω–∏—Ö."""
        
        coco_output = {
            "info": {"description": "Dataset created from Unity Perception"},
            "licenses": [],
            "images": [],
            "annotations": [],
            "categories": categories
        }

        image_id_counter = 1
        annotation_id_counter = 1

        for item in tqdm(data, desc=f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è {json_path.name}", unit="file"):
            # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
            img_path = Path(item['img_path'])
            parent_folder_name = img_path.parent.parent.name
            sequence_folder_name = img_path.parent.name
            unique_base_name = f"{parent_folder_name}_{sequence_folder_name}_{img_path.name}"
            
            # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            shutil.copy(img_path, dest_img_dir / unique_base_name)
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_info = {
                "id": image_id_counter,
                "file_name": unique_base_name,
                "width": item['width'],
                "height": item['height']
            }
            coco_output["images"].append(image_info)
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –∞–Ω–æ—Ç–∞—Ü—ñ—ó
            for ann in item['annotations']:
                bbox = ann['bbox']
                area = bbox[2] * bbox[3] # width * height
                
                annotation_info = {
                    "id": annotation_id_counter,
                    "image_id": image_id_counter,
                    "category_id": ann['category_id'],
                    "bbox": bbox,
                    "area": area,
                    "iscrowd": 0,
                    "segmentation": [] # –ó–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –¥–µ—Ç–µ–∫—Ü—ñ—ó
                }
                coco_output["annotations"].append(annotation_info)
                annotation_id_counter += 1
            
            image_id_counter += 1
            
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ JSON —Ñ–∞–π–ª—É
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(coco_output, f, ensure_ascii=False, indent=4)
        
        print(f"‚úÖ –§–∞–π–ª '{json_path.name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(coco_output['images'])}, –∞–Ω–æ—Ç–∞—Ü—ñ–π: {len(coco_output['annotations'])}.")


if __name__ == '__main__':
    # --- –Ø–ö –í–ò–ö–û–†–ò–°–¢–û–í–£–í–ê–¢–ò ---
    # 1. –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏, —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ –∑ Unity (–¥–µ –ª–µ–∂–∞—Ç—å –ø–∞–ø–∫–∏ solo_0, solo_1 —ñ —Ç.–¥.)
    # 2. –í–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏, –∫—É–¥–∏ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π –¥–∞—Ç–∞—Å–µ—Ç.

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞–ø–æ–∫
    root = tk.Tk()
    root.withdraw()

    print("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ –¥–∞–Ω–∏–º–∏ Unity Perception...")
    source_directory = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ –¥–∞–Ω–∏–º–∏ Unity Perception")
    if not source_directory:
        print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –í–∏—Ö—ñ–¥.")
    else:
        print(f"–û–±—Ä–∞–Ω–æ –≤–∏—Ö—ñ–¥–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {source_directory}")

        print("\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è COCO –¥–∞—Ç–∞—Å–µ—Ç—É...")
        output_directory = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
        if not output_directory:
            print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –í–∏—Ö—ñ–¥.")
        else:
            print(f"–û–±—Ä–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {output_directory}")

            source_path = Path(source_directory)
            output_path = Path(output_directory)

            converter = COCODataConverter(source_dir=source_path, output_dir=output_path)
            converter.prepare_data()