import os
import shutil
import json
from glob import glob
from pathlib import Path
from sklearn.model_selection import train_test_split
from tqdm import tqdm
import tkinter as tk
from tkinter import filedialog
import xml.etree.ElementTree as ET
from xml.dom import minidom
from PIL import Image
from collections import defaultdict
from converters.converters import BaseDataConverter, remove_readonly
from inputimeout import inputimeout, TimeoutOccurred

# --- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è Faster R-CNN (—É —Ñ–æ—Ä–º–∞—Ç—ñ PASCAL VOC XML) ---
class PascalVOCDataConverter(BaseDataConverter):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –¥–∞–Ω—ñ –∑ Unity Perception —É —Ñ–æ—Ä–º–∞—Ç PASCAL VOC (XML) –¥–ª—è Faster R-CNN."""

    def prepare_data(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥, —â–æ –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –¥–ª—è Faster R-CNN."""
        print("\n--- –†–æ–∑–ø–æ—á–∞—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç Faster R-CNN (PASCAL VOC) ---")

        if self.output_dir.exists():
            print(f"üßπ –û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {self.output_dir}")
            shutil.rmtree(self.output_dir, onerror=remove_readonly)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –í–°–Ü –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ
        all_dirs = [p for p in self.source_dir.glob("*") if p.is_dir()]
        
        # 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ –∞–Ω–æ—Ç–∞—Ü—ñ—è–º–∏ (–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ), —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ "solo"
        annotated_dirs = sorted([p for p in all_dirs if p.name.startswith("solo")], key=self._natural_sort_key)
        
        # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ —Ñ–æ–Ω–æ–º (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ)
        negative_dirs_list = [p for p in all_dirs if not p.name.startswith("solo")]
        
        negative_dir = None # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º None
        
        if negative_dirs_list:
            negative_dir = negative_dirs_list[0] # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –∑–Ω–∞–π–¥–µ–Ω—É
            if len(negative_dirs_list) > 1:
                other_dirs_names = ", ".join([d.name for d in negative_dirs_list[1:]])
                print(f"‚ö†Ô∏è  –£–≤–∞–≥–∞: –ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π, —â–æ –Ω–µ —î 'solo*'.")
                print(f"   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è '{negative_dir.name}' —è–∫ –ø–∞–ø–∫–∞ –∑ —Ñ–æ–Ω–æ–º.")
                print(f"   –Ü–Ω—à—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–∞–ø–∫–∏: {other_dirs_names}")
            else:
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ (—Ñ–æ–Ω–æ–º): {negative_dir.name}")
        else:
            print(f"‚ö†Ô∏è  –£–≤–∞–≥–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ (—Ñ–æ–Ω–æ–º) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É {self.source_dir}.")
            print("   –í–∏–±—ñ—Ä–∫–∏ –±—É–¥—É—Ç—å —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω—ñ –ë–ï–ó –æ–∫—Ä–µ–º–∏—Ö —Ñ–æ–Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å.")

        if not annotated_dirs:
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 'solo*' –∑–∞ —à–ª—è—Ö–æ–º '{self.source_dir}'. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
            return

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫
        for subset in ["train", "val", "test"]:
            (self.output_dir / subset).mkdir(parents=True, exist_ok=True)

        # 1. –í–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ (–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑ YOLO)
        class_names = self._discover_classes(annotated_dirs)
        self._create_label_map(class_names) # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ –º–∞–ø–æ—é –∫–ª–∞—Å—ñ–≤

        # 2. –ó–±—ñ—Ä –≤—Å—ñ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ (–ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Ç–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö)
        
        # --- –ü–û–ß–ê–¢–û–ö –ó–ú–Ü–ù–ï–ù–û–ì–û –ë–õ–û–ö–£ ---
        
        # _gather_annotated_examples —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î 3 –∑–Ω–∞—á–µ–Ω–Ω—è: –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ, —Ä–æ–∑–º—ñ—Ä, —ñ —Ñ–æ–Ω –∑ –ø–∞–ø–æ–∫ 'solo'
        positive_examples, imgsz, negatives_from_solo = self._gather_annotated_examples(annotated_dirs)
        
        # _gather_negative_examples –∑–±–∏—Ä–∞—î –∑ –æ–∫—Ä–µ–º–æ—ó —Ñ–æ–Ω–æ–≤–æ—ó –ø–∞–ø–∫–∏
        negatives_from_background_dir = self._gather_negative_examples(negative_dir) 

        # –û–±'—î–¥–Ω—É—î–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑ –æ–±–æ—Ö –¥–∂–µ—Ä–µ–ª
        negative_examples = negatives_from_background_dir + negatives_from_solo
        
        if negatives_from_solo:
            print(f"‚ÑπÔ∏è  –î–æ–¥–∞–Ω–æ {len(negatives_from_solo)} —Ñ–æ–Ω–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤, –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —É 'solo' –ø–∞–ø–∫–∞—Ö.")
        if negatives_from_background_dir:
            print(f"‚ÑπÔ∏è  –î–æ–¥–∞–Ω–æ {len(negatives_from_background_dir)} —Ñ–æ–Ω–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –æ–∫—Ä–µ–º–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó '{negative_dir.name}'.")
        
        if negative_examples:
             print(f"‚úÖ –í—Å—å–æ–≥–æ {len(negative_examples)} –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∏–±—ñ—Ä–æ–∫.")
        else:
            print("‚ö†Ô∏è  –£–≤–∞–≥–∞: –ñ–æ–¥–Ω–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–Ω—ñ –≤ 'solo' –ø–∞–ø–∫–∞—Ö, –∞–Ω—ñ –≤ –æ–∫—Ä–µ–º—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.")

        # --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù–ï–ù–û–ì–û –ë–õ–û–ö–£ ---

        # 3. –†–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö
        print("\nüîÑ –†–æ–∑–ø–æ–¥—ñ–ª –¥–∞–Ω–∏—Ö –∑–∞ –≤–∏–±—ñ—Ä–∫–∞–º–∏ (train/val/test)...")

        # 1. –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ (–∑ –æ–±'—î–∫—Ç–∞–º–∏) –Ω–∞ –≤—Å—ñ 3 –≤–∏–±—ñ—Ä–∫–∏
        train_pos, test_pos = train_test_split(positive_examples, test_size=0.2, random_state=42)
        train_pos, val_pos = train_test_split(train_pos, test_size=0.125, random_state=42) # 0.125 * 0.8 = 0.1

        # 2. –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ (—Ñ–æ–Ω) –Ω–∞ –≤—Å—ñ 3 –≤–∏–±—ñ—Ä–∫–∏
        if negative_examples:
            print(f"üîÑ –†–æ–∑–ø–æ–¥—ñ–ª {len(negative_examples)} –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤...")
            train_neg, test_neg = train_test_split(negative_examples, test_size=0.2, random_state=42)
            train_neg, val_neg = train_test_split(train_neg, test_size=0.125, random_state=42)
        else:
            print("‚ÑπÔ∏è  –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –Ω–µ –¥–æ–¥–∞—é—Ç—å—Å—è –¥–æ –≤–∏–±—ñ—Ä–æ–∫ (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ).")
            train_neg, val_neg, test_neg = [], [], []
        
        # 3. –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –≤–∏–±—ñ—Ä–∫–∏, –¥–æ–¥–∞—é—á–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç–∞–∫–æ–∂ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó
        train_files = train_pos + train_neg
        val_files = val_pos + val_neg
        test_files = test_pos + test_neg

        splits = {"train": train_files, "val": val_files, "test": test_files}

        # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫ —Ç–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é XML
        self._create_voc_structure(splits)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n--- ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ---")
        print(f"–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞: {len(train_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å ({len(train_pos)} –∑ –æ–±'—î–∫—Ç–∞–º–∏, {len(train_neg)} —Ñ–æ–Ω–æ–≤–∏—Ö)")
        print(f"–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞: {len(val_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å ({len(val_pos)} –∑ –æ–±'—î–∫—Ç–∞–º–∏, {len(val_neg)} —Ñ–æ–Ω–æ–≤–∏—Ö)")
        print(f"–¢–µ—Å—Ç–æ–≤–∞ –≤–∏–±—ñ—Ä–∫–∞:    {len(test_files)} –∑–æ–±—Ä–∞–∂–µ–Ω—å ({len(test_pos)} –∑ –æ–±'—î–∫—Ç–∞–º–∏, {len(test_neg)} —Ñ–æ–Ω–æ–≤–∏—Ö)")
        print("-----------------------------------------")
        total_images = len(train_files) + len(val_files) + len(test_files)
        print(f"üéâ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å: {total_images}")

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è "—Å–∫–ª–∞–¥–Ω–∏—Ö –Ω–µ–≥–∞—Ç–∏–≤—ñ–≤"
        self._add_hard_negatives_rcnn()

        print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è Faster R-CNN —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        stats = {
            "image_size": imgsz,
            "image_count": total_images,
            "negative_count": len(negative_examples), # –¢–µ–ø–µ—Ä —Ç—É—Ç –±—É–¥–µ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ
            "class_count": len(class_names)
        }
        return stats

    def _gather_annotated_examples(self, annotated_dirs):
        """
        –ó–±–∏—Ä–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–Ω–æ—Ç–æ–≤–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
        –¢–µ–ø–µ—Ä —Ç–∞–∫–æ–∂ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –ë–ï–ó –∞–Ω–æ—Ç–∞—Ü—ñ–π —è–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏.
        """
        positive_examples = []
        negative_examples_from_solo = [] # <-- –ù–û–í–ò–ô –°–ü–ò–°–û–ö
        imgsz = None
        
        print("\nüîé –ó–±—ñ—Ä —Ç–∞ –∞–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤ –∑ –∞–Ω–æ—Ç–∞—Ü—ñ—è–º–∏ (—ñ —Ñ–æ–Ω—É –∑ 'solo' –ø–∞–ø–æ–∫)...")
        for directory in tqdm(annotated_dirs, desc="–ê–Ω–∞–ª—ñ–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤", unit="–ø–∞–ø–∫–∞"):
            json_files = [p.parent / "step0.frame_data.json" for p in directory.glob("sequence.*/step0.camera.png") if (p.parent / "step0.frame_data.json").exists()]
            
            for json_path in json_files:
                img_path = json_path.parent / "step0.camera.png"
                current_imgsz_from_json = None # –†–æ–∑–º—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                
                with open(json_path) as f:
                    frame_data = json.load(f)

                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑ JSON (—è–∫—â–æ —î)
                if capture.get("dimension"):
                    img_w, img_h = capture["dimension"]
                    current_imgsz_from_json = (int(img_w), int(img_h))
                    if imgsz is None:
                        imgsz = current_imgsz_from_json # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∑ –ø–µ—Ä—à–æ–≥–æ —Ñ–∞–π–ª—É

                voc_annotations = []
                annotations_list = frame_data.get("annotations", capture.get("annotations", []))
                for annotation in annotations_list:
                    if "BoundingBox2DAnnotation" in annotation.get("@type", ""):
                        for value in annotation.get("values", []):
                            class_name = value.get("label_name") or value.get("labelName")
                            if not class_name: continue

                            px_x, px_y = value["origin"]
                            px_w, px_h = value["dimension"]
                            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É —Ñ–æ—Ä–º–∞—Ç [xmin, ymin, xmax, ymax]
                            box = [int(px_x), int(px_y), int(px_x + px_w), int(px_y + px_h)]
                            voc_annotations.append({"class_name": class_name, "box": box})

                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É, –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–∏–π, —è–∫—â–æ –≤ —Ñ–∞–π–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                image_size_for_this_file = current_imgsz_from_json or imgsz 

                if voc_annotations:
                    # –¶–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥
                    positive_examples.append({"img_path": img_path, "img_size": image_size_for_this_file, "annotations": voc_annotations})
                else:
                    # --- –ó–ú–Ü–ù–ê ---
                    # –¶–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ (—Ñ–æ–Ω) –∑ –ø–∞–ø–∫–∏ 'solo'
                    negative_examples_from_solo.append({"img_path": img_path, "img_size": image_size_for_this_file, "annotations": []})

        print(f"\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(positive_examples)} –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑ –∞–Ω–æ—Ç–∞—Ü—ñ—è–º–∏.")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–µ–ø–µ—Ä —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ, –∞ –Ω–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        if negative_examples_from_solo:
            print(f"‚ÑπÔ∏è  –ó–Ω–∞–π–¥–µ–Ω–æ {len(negative_examples_from_solo)} —Ñ–∞–π–ª—ñ–≤ –±–µ–∑ –∞–Ω–æ—Ç–∞—Ü—ñ–π (—Ñ–æ–Ω) —É 'solo' –ø–∞–ø–∫–∞—Ö. –í–æ–Ω–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –¥–æ –≤–∏–±—ñ—Ä–∫–∏.")
        
        return positive_examples, imgsz, negative_examples_from_solo # <-- –ü–û–í–ï–†–¢–ê–Ñ–ú–û 3 –ó–ù–ê–ß–ï–ù–ù–Ø

    def _gather_negative_examples(self, negative_dir):
        """–ó–±–∏—Ä–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ (–∑ –æ–∫—Ä–µ–º–æ—ó –ø–∞–ø–∫–∏)."""
        negative_examples = []
        if negative_dir:
            print(f"üîé –ó–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤ –∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ –∑ '{negative_dir.name}'...")
            all_negative_files = [p for p in negative_dir.glob("sequence.*/step0.camera.png")]
            for img_path in tqdm(all_negative_files, desc="–ê–Ω–∞–ª—ñ–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤"):
                try:
                    with Image.open(img_path) as img:
                        width, height = img.size
                    current_img_size = (width, height)
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {img_path}. –ü–æ–º–∏–ª–∫–∞: {e}. –¶–µ–π —Ñ–∞–π–ª –±—É–¥–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                    continue
                
                negative_examples.append({"img_path": img_path, "img_size": current_img_size, "annotations": []})
            
            if not negative_examples:
                print(f"‚ö†Ô∏è  –£–≤–∞–≥–∞: –ü–∞–ø–∫–∞ '{negative_dir.name}' –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ñ–≤ –∑–∞ —à–∞–±–ª–æ–Ω–æ–º 'sequence.*/step0.camera.png'.")
            else:
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(negative_examples)} –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —É –æ–∫—Ä–µ–º—ñ–π –ø–∞–ø—Ü—ñ.")
        
        return negative_examples

    def _create_voc_structure(self, splits):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Ç–∞ –≥–µ–Ω–µ—Ä—É—î XML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
        print("\nüì¶ –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ PASCAL VOC...")
        for split_name, files in splits.items():
            split_dir = self.output_dir / split_name
            for item in tqdm(files, desc=f"–û–±—Ä–æ–±–∫–∞ '{split_name}'", unit="file"):
                img_path = item['img_path']
                # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
                parent_folder_name = img_path.parent.parent.name
                sequence_folder_name = img_path.parent.name
                unique_base_name = f"{parent_folder_name}_{sequence_folder_name}"

                # –ö–æ–ø—ñ—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                shutil.copy(img_path, split_dir / f"{unique_base_name}.png")

                # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ XML –∞–Ω–æ—Ç–∞—Ü—ñ—é
                xml_content = self._generate_xml_annotation(
                    folder=split_name,
                    filename=f"{unique_base_name}.png",
                    img_size=item['img_size'],
                    annotations=item['annotations']
                )
                with open(split_dir / f"{unique_base_name}.xml", "w", encoding='utf-8') as f:
                    f.write(xml_content)

    def _generate_xml_annotation(self, folder, filename, img_size, annotations):
        """–ì–µ–Ω–µ—Ä—É—î –≤–º—ñ—Å—Ç XML-—Ñ–∞–π–ª—É —É —Ñ–æ—Ä–º–∞—Ç—ñ PASCAL VOC."""
        root = ET.Element("annotation")
        ET.SubElement(root, "folder").text = folder
        ET.SubElement(root, "filename").text = filename
        ET.SubElement(root, "path").text = "unknown" # –ó–∞–∑–≤–∏—á–∞–π –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è

        source = ET.SubElement(root, "source")
        ET.SubElement(source, "database").text = "Unknown"

        if img_size:
            size = ET.SubElement(root, "size")
            ET.SubElement(size, "width").text = str(img_size[0])
            ET.SubElement(size, "height").text = str(img_size[1])
            ET.SubElement(size, "depth").text = "3"

        ET.SubElement(root, "segmented").text = "0"

        for ann in annotations:
            obj = ET.SubElement(root, "object")
            ET.SubElement(obj, "name").text = ann['class_name']
            ET.SubElement(obj, "pose").text = "Unspecified"
            ET.SubElement(obj, "truncated").text = "0"
            ET.SubElement(obj, "difficult").text = "0"
            bndbox = ET.SubElement(obj, "bndbox")
            ET.SubElement(bndbox, "xmin").text = str(ann['box'][0])
            ET.SubElement(bndbox, "ymin").text = str(ann['box'][1])
            ET.SubElement(bndbox, "xmax").text = str(ann['box'][2])
            ET.SubElement(bndbox, "ymax").text = str(ann['box'][3])

        # Pretty-printing the XML
        rough_string = ET.tostring(root, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ")

    def _discover_classes(self, annotated_dirs):
        """–°–∫–∞–Ω—É—î JSON-—Ñ–∞–π–ª–∏ –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        print("üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ —Ç–∞ –∑–±—ñ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö Perception...")
        class_names = set()

        stats_dir = self.output_dir / "statistics"
        stats_dir.mkdir(parents=True, exist_ok=True)
        
        for directory in tqdm(annotated_dirs, desc="–ü–æ—à—É–∫ –∫–ª–∞—Å—ñ–≤", unit="–ø–∞–ø–∫–∞"):
            dir_stats = defaultdict(list)

            json_files = [p.parent / "step0.frame_data.json" for p in directory.glob("sequence.*/step0.camera.png") if (p.parent / "step0.frame_data.json").exists()]
            for frame_file in json_files:
                with open(frame_file) as f:
                    frame_data = json.load(f)
                capture = frame_data.get("capture") or frame_data.get("captures", [{}])[0]
                annotations_list = frame_data.get("annotations", capture.get("annotations", []))
                for annotation in annotations_list:
                    if "BoundingBox2DAnnotation" in annotation.get("@type", ""):
                        for value in annotation.get("values", []):
                            label_name = value.get("label_name") or value.get("labelName")
                            if label_name:
                                class_names.add(label_name)
                                px_w, px_h = value["dimension"]
                                dir_stats[label_name].append((px_w, px_h))

            if dir_stats:
                stats_output = [f"--- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó '{directory.name}': ---"]
                for class_name, sizes in sorted(dir_stats.items()):
                    if sizes:
                        avg_w = sum(w for w, h in sizes) / len(sizes)
                        avg_h = sum(h for w, h in sizes) / len(sizes)
                        stats_output.append(f"     - –ö–ª–∞—Å: '{class_name}', –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä: {avg_w:.2f}x{avg_h:.2f} –ø—ñ–∫—Å–µ–ª—ñ–≤ ({len(sizes)} –æ–±'—î–∫—Ç—ñ–≤)")
                stats_output.append("   -------------------------------------------------")
                
                print("\n" + "\n".join(stats_output))

                stats_filename = stats_dir / f"stats_{directory.name}.txt"
                with open(stats_filename, 'w', encoding='utf-8') as f_stat:
                    f_stat.write("\n".join(stats_output))
                print(f"     üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: {stats_filename}")
        
        sorted_names = sorted(list(class_names))
        print(f"\n‚úÖ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ {len(sorted_names)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤: {sorted_names}")
        return sorted_names

    def _create_label_map(self, class_names):
        """–°—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª label_map.txt, –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ –Ω–∞–≤—á–∞–Ω–Ω—è."""
        print("‚úçÔ∏è  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É 'label_map.txt' –∑ —ñ–º–µ–Ω–∞–º–∏ –∫–ª–∞—Å—ñ–≤...")
        with open(self.output_dir / 'label_map.txt', 'w', encoding='utf-8') as f:
            for name in class_names:
                f.write(f"{name}\n")

    def _add_hard_negatives_rcnn(self):
        """–î–æ–¥–∞—î–º–æ '—Å–∫–ª–∞–¥–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ' –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏ –∑ 5-—Å–µ–∫—É–Ω–¥–Ω–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º."""
        answer = ''
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–∞–π–º–∞—É—Ç–æ–º —É 5 —Å–µ–∫—É–Ω–¥
            prompt = "\n–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏? (y/n) [–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ 'n' —á–µ—Ä–µ–∑ 5—Å]: "
            answer = inputimeout(prompt=prompt, timeout=5).strip().lower()
        except TimeoutOccurred:
            # –Ø–∫—â–æ —á–∞—Å –≤–∏–π—à–æ–≤, –ø—Ä–∏—Å–≤–æ—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å 'n' —ñ –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            answer = 'n'
            print("\n–ß–∞—Å –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –ü—Ä–∏–π–º–∞—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å 'n'.")
        except Exception:
             # –Ø–∫—â–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ '–∑–∞–≥–ª—É—à–∫—É',
             # —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
             prompt = "\n–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –≤–∏–±—ñ—Ä–∫–∏? (y/n): "
             answer = input(prompt).strip().lower()

        if answer not in ['y', 'Y', '–Ω', '–ù']:
            print("–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Hard Negative –ø—Ä–∏–∫–ª–∞–¥—ñ–≤.")
            return

        root = tk.Tk()
        root.withdraw()
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏...")
        hard_negatives_dir = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ Hard Negative –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏")
        if not hard_negatives_dir:
            print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            return

        hn_images = glob(os.path.join(hard_negatives_dir, "*.jpg")) + glob(os.path.join(hard_negatives_dir, "*.png"))
        if not hn_images:
            print("‚ö†Ô∏è –£ –≤–∫–∞–∑–∞–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å (.jpg –∞–±–æ .png).")
            return
            
        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–∏ –º—ñ–∂ train, val —Ç–∞ test —É –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó ~70/10/20
        train_val_hn, test_hn = train_test_split(hn_images, test_size=0.2, random_state=42)
        train_hn, val_hn = train_test_split(train_val_hn, test_size=0.125, random_state=42)
        
        target_splits = {
            "train": train_hn,
            "val": val_hn,
            "test": test_hn
        }

        for split_name, files in target_splits.items():
            if not files: continue
            
            target_dir = self.output_dir / split_name
            print(f"\n–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è {len(files)} Hard Negative —Ñ–∞–π–ª—ñ–≤ –¥–æ '{split_name}'...")
            for img_path_str in tqdm(files, desc=f"Hard Negatives to {split_name}", unit="file"):
                img_path = Path(img_path_str)
                base_name, _ = os.path.splitext(img_path.name)
                
                # –ö–æ–ø—ñ—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                shutil.copy(img_path, target_dir / img_path.name)
                
                try:
                    with Image.open(img_path) as img:
                        width, height = img.size
                    current_img_size = (width, height)
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {img_path}. –ü–æ–º–∏–ª–∫–∞: {e}. XML –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É –Ω–µ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
                    continue

                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π XML –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É
                xml_content = self._generate_xml_annotation(
                    folder=split_name,
                    filename=img_path.name,
                    img_size=current_img_size,
                    annotations=[]
                )
                with open(target_dir / f"{base_name}.xml", "w", encoding='utf-8') as f:
                    f.write(xml_content)
                    
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ {len(files)} —Ñ–∞–π–ª—ñ–≤ –¥–æ –≤–∏–±—ñ—Ä–∫–∏ '{split_name}'.")

    def get_image_dimensions(self):
        """
        –®–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î –≤ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö,
        –∞ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î - –≤ –≤–∏—Ö—ñ–¥–Ω–∏—Ö.
        """
        print(f"üîç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ —Ä–∞–Ω—ñ—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É '{self.output_dir}'...")
        
        search_dirs = [
            self.output_dir / "train",
            self.output_dir / "val",
            self.output_dir / "test"
        ]

        for directory in search_dirs:
            if not directory.exists():
                continue

            try:
                # –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ-–ª—ñ–ø—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (.png –∞–±–æ .jpg)
                image_path = next(directory.glob("*.[jp][pn]g"))
                with Image.open(image_path) as img:
                    width, height = img.size
                    print(f"‚úÖ –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ: {width}x{height} (–∑ —Ñ–∞–π–ª—É {image_path.name})")
                    return (width, height)
            except (StopIteration, OSError):
                continue
        
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ '{self.output_dir}'. –°–ø—Ä–æ–±–∞ –ø–æ—à—É–∫—É —É –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")

        source_dirs_list = [p for p in self.source_dir.glob("solo*") if p.is_dir()]
        if not source_dirs_list:
            # –Ø–∫—â–æ 'solo*' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –±—É–¥—å-—è–∫—É –ø–∞–ø–∫—É, 
            # —â–æ–± —Ö–æ—á–∞ –± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            source_dirs_list = [p for p in self.source_dir.glob("*") if p.is_dir()]
            if not source_dirs_list:
                print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫ –≤ {self.source_dir}")
                return None
        
        for directory in source_dirs_list:
            try:
                image_path = next(directory.glob("sequence.*/*.png"))
                with Image.open(image_path) as img:
                    width, height = img.size
                    print(f"‚úÖ –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ –∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {width}x{height}")
                    return (width, height)
            except (StopIteration, FileNotFoundError, OSError):
                continue
        
        print("‚ö†Ô∏è –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω—ñ –∑ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏—Ö, –∞–Ω—ñ –∑ –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.")
        return None