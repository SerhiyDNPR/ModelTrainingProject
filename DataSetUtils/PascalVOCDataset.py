import os
import glob
import torch
from tqdm import tqdm
import xml.etree.ElementTree as ET
from PIL import Image

class PascalVOCDataset(torch.utils.data.Dataset):
    """
    –ö–∞—Å—Ç–æ–º–Ω–∏–π Dataset –¥–ª—è PASCAL VOC, —â–æ –∫–µ—à—É—î –¥–∞–Ω—ñ –≤ RAM –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É.
    """
    def __init__(self, root_dir, transforms, label_map):
        self.root_dir = root_dir
        self.transforms = transforms
        self.label_map = label_map
        self.xml_files = sorted(glob.glob(os.path.join(root_dir, "*.xml")))
        
        # --- –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
        self.data_cache = []
        print(f"\n‚è≥ –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ '{root_dir}' –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É –ø–∞–º'—è—Ç—å...")
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ–æ–Ω–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —Ü–µ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∞ –≤–∏–±—ñ—Ä–∫–∞
        files_to_process = []
        if 'train' in root_dir:
            for xml_path in self.xml_files:
                tree = ET.parse(xml_path)
                if tree.getroot().find('object') is not None:
                    files_to_process.append(xml_path)
            if len(files_to_process) < len(self.xml_files):
                print(f"üîç –î–ª—è '{os.path.basename(root_dir)}' –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(self.xml_files) - len(files_to_process)} —Ñ–æ–Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å.")
        else:
            files_to_process = self.xml_files

        for xml_path in tqdm(files_to_process, desc="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"):
            tree = ET.parse(xml_path)
            root = tree.getroot()
            
            img_filename = root.find('filename').text
            img_path = os.path.join(self.root_dir, img_filename)
            img = Image.open(img_path).convert("RGB")

            boxes = []
            labels = []
            for member in root.findall('object'):
                class_name = member.find('name').text
                if class_name in self.label_map and class_name != '__background__':
                    bndbox = member.find('bndbox')
                    xmin = int(bndbox.find('xmin').text)
                    ymin = int(bndbox.find('ymin').text)
                    xmax = int(bndbox.find('xmax').text)
                    ymax = int(bndbox.find('ymax').text)
                    boxes.append([xmin, ymin, xmax, ymax])
                    labels.append(self.label_map[class_name])
            
            # –î–æ–¥–∞—î–º–æ –≤ –∫–µ—à –ª–∏—à–µ –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
            self.data_cache.append({
                "image": img,
                "boxes": boxes,
                "labels": labels
            })
        print("‚úÖ –ö–µ—à—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    def __len__(self):
        # –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–ø–µ—Ä –¥–æ—Ä—ñ–≤–Ω—é—î —Ä–æ–∑–º—ñ—Ä—É –∫–µ—à—É
        return len(self.data_cache)
    
    def __iter__(self):
            for i in range(len(self)):
                yield self[i]

    def __getitem__(self, idx):
        # start_time = time.time() # –î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        cached_data = self.data_cache[idx]
        
        img = cached_data["image"].copy() # –ö–æ–ø—ñ—é—î–º–æ, —â–æ–± —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ –ø—Å—É–≤–∞–ª–∏ –∫–µ—à
        boxes = torch.as_tensor(cached_data["boxes"], dtype=torch.float32)
        labels = torch.as_tensor(cached_data["labels"], dtype=torch.int64)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —É val/test –ø–æ—Ç—Ä–∞–ø–∏–≤ —Ñ–∞–π–ª –±–µ–∑ –æ–±'—î–∫—Ç—ñ–≤
        if boxes.shape[0] == 0:
            # –°—Ç–≤–æ—Ä—é—î–º–æ "–ø—É—Å—Ç–∏–π" target, –∞–ª–µ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏
            target = {
                "boxes": torch.zeros((0, 4), dtype=torch.float32),
                "labels": torch.zeros(0, dtype=torch.int64),
                "image_id": torch.tensor([idx])
            }
        else:
            target = {
                "boxes": boxes,
                "labels": labels,
                "image_id": torch.tensor([idx])
            }
        
        # print(f"__getitem__ took {time.time() - start_time:.6f} seconds") # –î–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        return img, target