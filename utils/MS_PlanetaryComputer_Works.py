import pystac_client
import planetary_computer
import requests
import rasterio
import numpy as np
import os
import random
import glob
from math import cos, radians

def convert_naip_to_jpeg(tiff_path, jpeg_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –æ–¥–∏–Ω 4-–∫–∞–Ω–∞–ª—å–Ω–∏–π NAIP GeoTIFF –≤ –∫–æ–ª—å–æ—Ä–æ–≤–∏–π JPEG."""
    try:
        with rasterio.open(tiff_path) as src:
            if src.count < 3:
                print(f"    ‚ö†Ô∏è –§–∞–π–ª '{os.path.basename(tiff_path)}' –Ω–µ —î –∫–æ–ª—å–æ—Ä–æ–≤–∏–º. –ü—Ä–æ–ø—É—â–µ–Ω–æ.")
                return False
            # ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ –∑–º—ñ–Ω)
            red, green, blue = src.read(1), src.read(2), src.read(3)
            profile = src.profile
        def scale(c):
            if c.dtype == np.uint8: return c
            p2, p98 = np.percentile(c[c > 0], (2, 98)); s = np.clip(c, p2, p98)
            return ((s - p2) / (p98 - p2) * 255).astype(np.uint8)
        profile.update(driver='JPEG', count=3, dtype=rasterio.uint8)
        with rasterio.open(jpeg_path, 'w', **profile) as dst:
            dst.write(scale(red), 1); dst.write(scale(green), 2); dst.write(scale(blue), 3)
        print(f"    ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–ª—å–æ—Ä–æ–≤–∏–π —Ñ–∞–π–ª: {os.path.basename(jpeg_path)}")
        return True
    except Exception as e:
        print(f"    ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó {os.path.basename(tiff_path)}: {e}")
        return False

def download_file_with_progress(href):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø—Ä–æ–≥—Ä–µ—Å—É."""
    print(f"‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {os.path.basename(href)}")
    response = requests.get(href, stream=True)
    response.raise_for_status()
    # ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ –∑–º—ñ–Ω)
    total_size = int(response.headers.get('content-length', 0))
    chunk_size = 8192
    temp_data = bytearray()
    for chunk in response.iter_content(chunk_size=chunk_size):
        if chunk:
            temp_data.extend(chunk)
            downloaded = len(temp_data)
            if total_size:
                percent = downloaded * 100 // total_size
                print(f"\r    –ü—Ä–æ–≥—Ä–µ—Å: {percent}% ({downloaded // 1024} KB / {total_size // 1024} KB)", end="")
    print()
    return temp_data

def get_season(month):
    """–í–∏–∑–Ω–∞—á–∞—î —Å–µ–∑–æ–Ω –∑–∞ –Ω–æ–º–µ—Ä–æ–º –º—ñ—Å—è—Ü—è."""
    if month in [12, 1, 2]: return "winter"
    if month in [3, 4, 5]: return "spring"
    if month in [6, 7, 8]: return "summer"
    if month in [9, 10, 11]: return "autumn"
    return None

# --- –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø ---
def scan_existing_files(output_dir):
    """–°–∫–∞–Ω—É—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Ç–∞ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ–∑–æ–Ω—É."""
    counts = {"winter": 0, "spring": 0, "summer": 0, "autumn": 0}
    if not os.path.isdir(output_dir):
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è '{output_dir}' –Ω–µ —ñ—Å–Ω—É—î. –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –Ω—É–ª—è.")
        return counts

    # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —à–∞–±–ª–æ–Ω—É USA_season_number.jpg
    search_pattern = os.path.join(output_dir, "USA_*.jpg")
    for filepath in glob.glob(search_pattern):
        filename = os.path.basename(filepath)
        parts = filename.replace('.jpg', '').split('_')
        if len(parts) == 3 and parts[0] == 'USA':
            season = parts[1]
            if season in counts:
                counts[season] += 1
    return counts

# --- –û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–∫—Ä–∏–ø—Ç—É ---
try:
    # 1. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
    USA_BBOX = [-125.0, 24.0, -66.0, 49.0]
    TIME_RANGE = "2020-01-01/2023-12-31"
    IMAGES_PER_SEASON = 10
    # --- –ó–ú–Ü–ù–ï–ù–û: –®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó ---
    OUTPUT_DIR = r"C:\Users\serhi\OneDrive\CD_DSST\Article_syntetic_data\Data_for_tests\Map-textures"
    
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    # --- –ó–ú–Ü–ù–ï–ù–û: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤ ---
    season_counts = scan_existing_files(OUTPUT_DIR)
    print("–°—Ç–∞–Ω –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:")
    for s, c in season_counts.items():
        print(f"  - {s.capitalize()}: –∑–Ω–∞–π–¥–µ–Ω–æ {c} —Ñ–∞–π–ª—ñ–≤.")

    # 2. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É
    catalog = pystac_client.Client.open(
        "https://planetarycomputer.microsoft.com/api/stac/v1",
        modifier=planetary_computer.sign_inplace,
    )
    
    print("\nüõ∞Ô∏è  –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –ø–æ—à—É–∫ –∑–Ω—ñ–º–∫—ñ–≤ –¥–ª—è –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó...")

    # 3. –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–æ—à—É–∫—É
    while any(count < IMAGES_PER_SEASON for count in season_counts.values()):
        rand_lon = random.uniform(USA_BBOX[0], USA_BBOX[2])
        rand_lat = random.uniform(USA_BBOX[1], USA_BBOX[3])
        search_bbox = [rand_lon, rand_lat, rand_lon + 0.05, rand_lat + 0.05]
        
        status = " | ".join([f"{s.capitalize()}: {c}/{IMAGES_PER_SEASON}" for s, c in season_counts.items()])
        print(f"\n[{status}]")
        print(f"üìç –ü–æ—à—É–∫ —É –Ω–æ–≤—ñ–π —Ç–æ—á—Ü—ñ: lon={rand_lon:.2f}, lat={rand_lat:.2f}")

        try:
            search = catalog.search(collections=["naip"], bbox=search_bbox, datetime=TIME_RANGE)
            items = list(search.item_collection())
        except Exception as e:
            print(f"    ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}. –°–ø—Ä–æ–±–∞ –≤ —ñ–Ω—à—ñ–π —Ç–æ—á—Ü—ñ.")
            continue

        if not items:
            print("    - –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–Ω—ñ–º–∫—ñ–≤ —É —Ü—ñ–π —Ç–æ—á—Ü—ñ.")
            continue
        
        item = items[0]
        item_month = item.datetime.month
        item_season = get_season(item_month)
        
        if item_season and season_counts[item_season] < IMAGES_PER_SEASON:
            print(f"    üí° –ó–Ω–∞–π–¥–µ–Ω–æ –∑–Ω—ñ–º–æ–∫ –¥–ª—è —Å–µ–∑–æ–Ω—É '{item_season}'! (–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {season_counts[item_season]}/{IMAGES_PER_SEASON})")
            
            season_counts[item_season] += 1
            count = season_counts[item_season]
            base_name = f"USA_{item_season}_{count}"
            
            href = item.assets["image"].href
            temp_data = download_file_with_progress(href)
            
            tiff_filename = os.path.join(OUTPUT_DIR, f"{base_name}.tif")
            jpeg_filename = os.path.join(OUTPUT_DIR, f"{base_name}.jpg")

            with open(tiff_filename, "wb") as f:
                f.write(temp_data)

            if convert_naip_to_jpeg(tiff_filename, jpeg_filename):
                os.remove(tiff_filename)
            else:
                print(f"    - –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {os.path.basename(tiff_filename)} –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                season_counts[item_season] -= 1
        else:
            if item_season:
                print(f"    - –ó–Ω–∞–π–¥–µ–Ω–æ –∑–Ω—ñ–º–æ–∫ –¥–ª—è '{item_season}', –∞–ª–µ –∫–≤–æ—Ç–∞ –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
            else:
                 print(f"    - –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–µ–∑–æ–Ω –¥–ª—è –∑–Ω—ñ–º–∫–∞.")

    print(f"\n\nüéâ –ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å—ñ –∫–≤–æ—Ç–∏ –ø–æ 10 —Ñ–∞–π–ª—ñ–≤ –Ω–∞ —Å–µ–∑–æ–Ω –≤–∏–∫–æ–Ω–∞–Ω–æ. –§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ '{OUTPUT_DIR}'")

except Exception as e:
    print(f"\nüí• –í–∏–Ω–∏–∫–ª–∞ –∑–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")