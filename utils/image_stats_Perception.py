import os
import glob
import json
import tkinter as tk
from tkinter import filedialog
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.widgets import CheckButtons, RectangleSelector
import matplotlib.ticker as mticker
import numpy as np

class ImageViewer:
    """
    –ö–ª–∞—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤ –æ–∫—Ä–µ–º–æ–º—É –≤—ñ–∫–Ω—ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é
    –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ–∫ —Ç–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª–∞–≤—ñ—à—ñ ESC.
    –¢–µ–ø–µ—Ä —Ç–∞–∫–æ–∂ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
    """
    def __init__(self, image_objects, selected_range, dimension_type):
        if not image_objects:
            print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ.")
            return

        self.image_objects = image_objects
        self.selected_range = selected_range
        self.dimension_type = dimension_type # 'widths' or 'heights'
        self.current_index = 0

        self.fig, self.ax = plt.subplots()
        
        if self.fig.canvas.manager:
            self.fig.canvas.manager.set_window_title("–ü–µ—Ä–µ–≥–ª—è–¥ –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        
        self.fig.instance = self
        self.cid = self.fig.canvas.mpl_connect('key_press_event', self.on_key_press)

        self.show_image()
        
        try:
            self.fig.canvas.get_tk_widget().focus_force()
        except AttributeError:
            print("\n–ü–æ—Ä–∞–¥–∞: –ö–ª–∞—Ü–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–∫–Ω—ñ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º, —â–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à–∞–º–∏.")

        plt.show(block=True)

    def show_image(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ç–æ—á–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."""
        self.ax.clear()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞
        path, width, height = self.image_objects[self.current_index]
        
        try:
            image = mpimg.imread(path)
            self.ax.imshow(image)
        except FileNotFoundError:
            self.ax.text(0.5, 0.5, f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:\n{path}", ha='center', va='center', color='red')
        except Exception as e:
            self.ax.text(0.5, 0.5, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:\n{os.path.basename(path)}\n{e}", ha='center', va='center', color='red')

        # --- –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –§–û–†–ú–£–í–ê–ù–ù–Ø –†–û–ó–®–ò–†–ï–ù–û–ì–û –ó–ê–ì–û–õ–û–í–ö–ê ---
        range_min, range_max = self.selected_range
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑–º—ñ—Ä–∏
        width_str = f"W: {width}"
        height_str = f"H: {height}"
        
        # –í–∏–¥—ñ–ª—è—î–º–æ –∂–∏—Ä–Ω–∏–º —Ç–æ–π —Ä–æ–∑–º—ñ—Ä, –∑–∞ —è–∫–∏–º –≤—ñ–¥–±—É–≤–∞–≤—Å—è –≤—ñ–¥–±—ñ—Ä
        if self.dimension_type == 'widths':
            info_str = f"**{width_str}**, {height_str}"
        else:
            info_str = f"{width_str}, **{height_str}**"

        title_line1 = f"–û–±'—î–∫—Ç: {self.current_index + 1}/{len(self.image_objects)} | –î—ñ–∞–ø–∞–∑–æ–Ω: [{range_min:.0f}-{range_max:.0f}] px"
        title_line2 = f"–†–æ–∑–º—ñ—Ä–∏ –æ–±'—î–∫—Ç–∞: {info_str.replace('**', '')}" # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–∑ –∑—ñ—Ä–æ—á–æ–∫
        title_line3 = os.path.basename(path)
        
        full_title = f"{title_line1}\n{title_line2}\n{title_line3}"
        
        # –î–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ text –∑–∞–º—ñ—Å—Ç—å title
        self.ax.set_title(full_title)
        
        self.ax.axis('off')
        self.fig.canvas.draw()

    def on_key_press(self, event):
        """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –≤–∏—Ö–æ–¥—É."""
        if event.key == 'right':
            self.current_index = (self.current_index + 1) % len(self.image_objects)
            self.show_image()
        elif event.key == 'left':
            self.current_index = (self.current_index - 1 + len(self.image_objects)) % len(self.image_objects)
            self.show_image()
        elif event.key == 'escape':
            plt.close(self.fig)

def select_root_directory():
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó."""
    print("–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–∞–ø–∫–∏...")
    root = tk.Tk()
    root.withdraw()
    directory_path = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –∑ –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏ solo, solo_1...")
    return directory_path

def analyze_data(root_dir):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ, —Å—Ç–≤–æ—Ä—é—é—á–∏ —î–¥–∏–Ω–∏–π —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤ (bboxes) –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É.
    """
    def get_sort_key(dir_path):
        name = os.path.basename(dir_path)
        parts = name.split('_')
        if len(parts) > 1 and parts[1].isdigit():
            return int(parts[1])
        return -1

    all_solo_dirs = glob.glob(os.path.join(root_dir, 'solo*'))
    
    if not all_solo_dirs:
        print(f"‚ùå –£ –ø–∞–ø—Ü—ñ '{root_dir}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥—ñ–≤ –∑ –Ω–∞–∑–≤–æ—é 'solo...'.")
        return None
        
    solo_dirs = sorted(all_solo_dirs, key=get_sort_key)
    print(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ {len(solo_dirs)} –∫–∞—Ç–∞–ª–æ–≥—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {[os.path.basename(d) for d in solo_dirs]}")

    all_stats = {}

    for solo_dir in solo_dirs:
        solo_name = os.path.basename(solo_dir)
        print(f"üîÑ –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É: {solo_name}...")
        annotation_files = glob.glob(os.path.join(solo_dir, '**', '*.json'), recursive=True)
        
        # --- –ó–ú–Ü–ù–ê –°–¢–†–£–ö–¢–£–†–ò –î–ê–ù–ò–• ---
        bboxes = []

        for ann_file in annotation_files:
            try:
                with open(ann_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                for capture in data.get('captures', []):
                    image_filename = capture.get('filename')
                    if not image_filename:
                        continue
                    
                    image_path = os.path.join(os.path.dirname(ann_file), image_filename)

                    for annotation in capture.get('annotations', []):
                        if annotation.get('id') == 'bounding box':
                            for bbox_value in annotation.get('values', []):
                                dimension = bbox_value.get('dimension')
                                if dimension and len(dimension) == 2:
                                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±'—î–∫—Ç
                                    bboxes.append({'path': image_path, 'width': dimension[0], 'height': dimension[1]})
            except json.JSONDecodeError:
                print(f"\n‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON —É —Ñ–∞–π–ª—ñ {ann_file}")
            except Exception as e:
                print(f"\n‚ö†Ô∏è –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É {ann_file}: {e}")
        
        all_stats[solo_name] = {'bboxes': bboxes}
        
    return all_stats

def create_interactive_plot(stats_to_plot, all_stats_with_paths, title, xlabel, data_type):
    """
    –°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–æ–±—Ä–∞–∂–µ–Ω—å.
    """
    fig, ax = plt.subplots(figsize=(14, 8))
    plt.subplots_adjust(right=0.75)
    
    ax.set_title(title, fontsize=16)
    ax.set_xlabel(f"{xlabel} (–ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞)")
    ax.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
    ax.grid(True, which="both", linestyle='--', alpha=0.6)

    lines = {}
    labels = []
    
    hist_data = {name: [item[0] for item in data] for name, data in stats_to_plot.items()}
    all_values = [item for data in hist_data.values() for item in data if item > 0]
    
    if not all_values:
        ax.text(0.5, 0.5, '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è', ha='center', va='center', transform=ax.transAxes)
        plt.show()
        return

    min_val = np.floor(np.log10(min(all_values)))
    max_val = np.ceil(np.log10(max(all_values)))
    bins = np.logspace(min_val, max_val, num=75)

    for name, data in hist_data.items():
        filtered_data = [d for d in data if d > 0]
        if filtered_data:
            hist_type = 'bar' if len(hist_data) == 1 else 'step'
            alpha = 0.7 if len(hist_data) == 1 else 1.0
            _, _, patches = ax.hist(filtered_data, bins=bins, histtype=hist_type, label=name, linewidth=2, alpha=alpha)
            lines[name] = patches
            labels.append(name)
            
    ax.set_xscale('log')
    ax.xaxis.set_major_formatter(mticker.ScalarFormatter())
    ax.xaxis.get_major_formatter().set_scientific(False)
    ax.minorticks_off()
    
    fig.widgets = []

    if len(labels) > 1:
        checkbox_ax = plt.axes([0.78, 0.6, 0.18, 0.3])
        actives = [True] * len(labels)
        check = CheckButtons(checkbox_ax, labels, actives)
        
        def toggle_visibility(label):
            for patch in lines[label]:
                patch.set_visible(not patch.get_visible())
            fig.canvas.draw_idle()
        
        check.on_clicked(toggle_visibility)
        fig.widgets.append(check)
    
    info_ax = plt.axes([0.78, 0.2, 0.18, 0.3])
    info_ax.axis('off')

    avg_strings = ["–°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:", "-----------------"]
    for name, data_list in stats_to_plot.items():
        values = [item[0] for item in data_list]
        avg = np.mean(values) if values else 0
        avg_strings.append(f"{name}: {avg:.1f} px")
    
    info_ax.text(0.0, 1.0, "\n".join(avg_strings), verticalalignment='top', fontsize=10, 
                 fontfamily='monospace', bbox=dict(boxstyle='round,pad=0.5', fc='wheat', alpha=0.5))
    
    ax.legend(loc='upper left')

    def on_select(eclick, erelease):
        """
        Callback-—Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –∑–±–∏—Ä–∞—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±'—î–∫—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–¥–∞—î —É ImageViewer.
        """
        xmin, xmax = sorted((eclick.xdata, erelease.xdata))
        print(f"\nüñ±Ô∏è –í–∏–±—Ä–∞–Ω–æ –¥—ñ–∞–ø–∞–∑–æ–Ω '{xlabel}': [{xmin:.2f}, {xmax:.2f}]")
        
        # --- –ó–ú–Ü–ù–ê –õ–û–ì–Ü–ö–ò: –ó–ë–ò–†–ê–Ñ–ú–û –û–ë'–Ñ–ö–¢–ò, –ê –ù–ï –®–õ–Ø–•–ò ---
        filtered_objects = []
        dimension_key = data_type.rstrip('s') # 'widths' -> 'width'
        
        for data in all_stats_with_paths.values():
            for bbox in data['bboxes']:
                if xmin <= bbox[dimension_key] <= xmax:
                    filtered_objects.append((bbox['path'], bbox['width'], bbox['height']))
        
        if filtered_objects:
            # –°–æ—Ä—Ç—É—î–º–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
            filtered_objects.sort()
            print(f"üñºÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ {len(filtered_objects)} –æ–±'—î–∫—Ç—ñ–≤. –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–µ—Ä–µ–≥–ª—è–¥–∞—á–∞...")
            # –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤, –¥—ñ–∞–ø–∞–∑–æ–Ω —Ç–∞ —Ç–∏–ø —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ
            ImageViewer(filtered_objects, (xmin, xmax), data_type)
        else:
            print("ü§∑ –£ –≤–∏–±—Ä–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –æ–±'—î–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    rs = RectangleSelector(ax, on_select, useblit=True, button=[1], minspanx=5, 
                           minspany=5, spancoords='pixels', interactive=True)
    fig.widgets.append(rs)

def plot_distributions(all_stats):
    """
    –ì–æ—Ç—É—î –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ all_stats.
    """
    if not all_stats:
        print("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.")
        return
    
    # –ê–¥–∞–ø—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó create_interactive_plot
    width_stats = {name: [(bbox['width'], bbox['path']) for bbox in data['bboxes']] for name, data in all_stats.items()}
    height_stats = {name: [(bbox['height'], bbox['path']) for bbox in data['bboxes']] for name, data in all_stats.items()}

    if len(all_stats) > 1:
        create_interactive_plot(width_stats, all_stats, '–†–æ–∑–ø–æ–¥—ñ–ª —à–∏—Ä–∏–Ω –æ–±\'—î–∫—Ç—ñ–≤ –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö', '–®–∏—Ä–∏–Ω–∞ (–ø—ñ–∫—Å–µ–ª—ñ)', 'widths')
        create_interactive_plot(height_stats, all_stats, '–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Å–æ—Ç –æ–±\'—î–∫—Ç—ñ–≤ –ø–æ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö', '–í–∏—Å–æ—Ç–∞ (–ø—ñ–∫—Å–µ–ª—ñ)', 'heights')

    # –ê–¥–∞–ø—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—É–º–∞—Ä–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    total_widths = [(bbox['width'], bbox['path']) for data in all_stats.values() for bbox in data['bboxes']]
    total_heights = [(bbox['height'], bbox['path']) for data in all_stats.values() for bbox in data['bboxes']]
    
    summary_width_stats = {'–£—Å—ñ —Ä–∞–∑–æ–º': total_widths}
    summary_height_stats = {'–£—Å—ñ —Ä–∞–∑–æ–º': total_heights}

    create_interactive_plot(summary_width_stats, all_stats, '–°—É–º–∞—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª —à–∏—Ä–∏–Ω –¥–ª—è –≤—Å—ñ—Ö –æ–±\'—î–∫—Ç—ñ–≤', '–®–∏—Ä–∏–Ω–∞ (–ø—ñ–∫—Å–µ–ª—ñ)', 'widths')
    create_interactive_plot(summary_height_stats, all_stats, '–°—É–º–∞—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Å–æ—Ç –¥–ª—è –≤—Å—ñ—Ö –æ–±\'—î–∫—Ç—ñ–≤', '–í–∏—Å–æ—Ç–∞ (–ø—ñ–∫—Å–µ–ª—ñ)', 'heights')
    
    print("\n‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")
    print("üñ±Ô∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: –∑–∞—Ç–∏—Å–Ω—ñ—Ç—å –ª—ñ–≤—É –∫–Ω–æ–ø–∫—É –º–∏—à—ñ –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫—É —Ç–∞ –ø—Ä–æ—Ç—è–≥–Ω—ñ—Ç—å, —â–æ–± –≤–∏–¥—ñ–ª–∏—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
    plt.show()

if __name__ == "__main__":
    root_directory = select_root_directory()
    
    if root_directory:
        print(f"–û–±—Ä–∞–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {root_directory}")
        stats = analyze_data(root_directory)
        if stats:
            plot_distributions(stats)
    else:
        print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

print("–†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")