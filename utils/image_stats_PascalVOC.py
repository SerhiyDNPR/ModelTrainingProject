import os
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import filedialog
from glob import glob
from tqdm import tqdm
import numpy as np
import matplotlib.ticker as mticker

def select_directory():
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó."""
    root = tk.Tk()
    root.withdraw()
    directory_path = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –∑ —Ñ–∞–π–ª–∞–º–∏ —Ä–æ–∑–º—ñ—Ç–∫–∏ Pascal VOC (.xml)")
    return directory_path

def parse_pascal_voc_files(directory_path):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –≤—Å—ñ—Ö .xml —Ñ–∞–π–ª–∞—Ö —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –ø–∞—Ä—Å–∏—Ç—å —ó—Ö
    —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–∫–∏ –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ –æ–±'—î–∫—Ç—ñ–≤.
    """
    xml_files = glob(os.path.join(directory_path, '*.xml'))
    
    if not xml_files:
        print(f"‚ùå –£ –ø–∞–ø—Ü—ñ '{directory_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ .xml.")
        return None

    print(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ {len(xml_files)} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –û–±—Ä–æ–±–∫–∞...")

    image_widths, image_heights = [], []
    bbox_widths, bbox_heights = [], []

    for xml_file in tqdm(xml_files, desc="–ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤"):
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()

            size_element = root.find('size')
            if size_element:
                img_width = int(size_element.find('width').text)
                img_height = int(size_element.find('height').text)
                image_widths.append(img_width)
                image_heights.append(img_height)

            for obj in root.findall('object'):
                bndbox = obj.find('bndbox')
                if bndbox:
                    xmin = int(bndbox.find('xmin').text)
                    ymin = int(bndbox.find('ymin').text)
                    xmax = int(bndbox.find('xmax').text)
                    ymax = int(bndbox.find('ymax').text)
                    
                    bbox_w = xmax - xmin
                    bbox_h = ymax - ymin
                    
                    if bbox_w > 0 and bbox_h > 0:
                        bbox_widths.append(bbox_w)
                        bbox_heights.append(bbox_h)
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É {os.path.basename(xml_file)}: {e}")

    return {
        "image_widths": image_widths,
        "image_heights": image_heights,
        "bbox_widths": bbox_widths,
        "bbox_heights": bbox_heights
    }

def plot_distributions(stats):
    """
    –ë—É–¥—É—î —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑—ñ–±—Ä–∞–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    if not stats or (not stats["image_widths"] and not stats["bbox_widths"]):
        print("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.")
        return

    # --- –ì—Ä–∞—Ñ—ñ–∫ 1: –†–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å (–∑–∞–ª–∏—à–∞—î–º–æ –≤ –ª—ñ–Ω—ñ–π–Ω—ñ–π —à–∫–∞–ª—ñ) ---
    if stats["image_widths"]:
        fig1, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
        fig1.suptitle('–†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å (–õ—ñ–Ω—ñ–π–Ω–∞ —à–∫–∞–ª–∞)', fontsize=16)

        ax1.hist(stats["image_widths"], bins=50, color='skyblue', edgecolor='black')
        ax1.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —à–∏—Ä–∏–Ω –∑–æ–±—Ä–∞–∂–µ–Ω—å')
        ax1.set_xlabel('–®–∏—Ä–∏–Ω–∞ (–ø—ñ–∫—Å–µ–ª—ñ)')
        ax1.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        
        ax2.hist(stats["image_heights"], bins=50, color='salmon', edgecolor='black')
        ax2.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Å–æ—Ç –∑–æ–±—Ä–∞–∂–µ–Ω—å')
        ax2.set_xlabel('–í–∏—Å–æ—Ç–∞ (–ø—ñ–∫—Å–µ–ª—ñ)')
        ax2.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        
        fig1.tight_layout(rect=[0, 0.03, 1, 0.95])

    # --- –ì—Ä–∞—Ñ—ñ–∫ 2: –†–æ–∑–º—ñ—Ä–∏ –æ–±'—î–∫—Ç—ñ–≤ (bounding boxes)
    if stats["bbox_widths"]:
        fig2, (ax3, ax4) = plt.subplots(1, 2, figsize=(14, 6))
        fig2.suptitle('–†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–∑–º—ñ—Ä—ñ–≤ –æ–±\'—î–∫—Ç—ñ–≤ (–õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∞ —à–∫–∞–ª–∞)', fontsize=16)
        
        # --- –ì—Ä–∞—Ñ—ñ–∫ –¥–ª—è —à–∏—Ä–∏–Ω –æ–±'—î–∫—Ç—ñ–≤ (ax3) ---
        bbox_widths = [w for w in stats["bbox_widths"] if w > 0]
        if bbox_widths:
            min_w = np.floor(np.log10(min(bbox_widths)))
            max_w = np.ceil(np.log10(max(bbox_widths)))
            bins_w = np.logspace(min_w, max_w, num=75)

            ax3.hist(bbox_widths, bins=bins_w, color='lightgreen', edgecolor='black')
            ax3.set_xscale('log')
            ax3.set_title('–†–æ–∑–ø–æ–¥—ñ–ª —à–∏—Ä–∏–Ω –æ–±\'—î–∫—Ç—ñ–≤')
            ax3.set_xlabel('–®–∏—Ä–∏–Ω–∞ (–ø—ñ–∫—Å–µ–ª—ñ)')
            ax3.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
            ax3.xaxis.set_major_formatter(mticker.ScalarFormatter())
            ax3.xaxis.get_major_formatter().set_scientific(False)
            ax3.minorticks_off()
            ax3.grid(True, which="both", linestyle='--', alpha=0.6)

        # --- –ì—Ä–∞—Ñ—ñ–∫ –¥–ª—è –≤–∏—Å–æ—Ç –æ–±'—î–∫—Ç—ñ–≤ (ax4) ---
        bbox_heights = [h for h in stats["bbox_heights"] if h > 0]
        if bbox_heights:
            min_h = np.floor(np.log10(min(bbox_heights)))
            max_h = np.ceil(np.log10(max(bbox_heights)))
            bins_h = np.logspace(min_h, max_h, num=75)

            ax4.hist(bbox_heights, bins=bins_h, color='gold', edgecolor='black')
            ax4.set_xscale('log')
            ax4.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Å–æ—Ç –æ–±\'—î–∫—Ç—ñ–≤')
            ax4.set_xlabel('–í–∏—Å–æ—Ç–∞ (–ø—ñ–∫—Å–µ–ª—ñ)')
            ax4.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
            ax4.xaxis.set_major_formatter(mticker.ScalarFormatter())
            ax4.xaxis.get_major_formatter().set_scientific(False)
            ax4.minorticks_off()
            ax4.grid(True, which="both", linestyle='--', alpha=0.6)
        
        fig2.tight_layout(rect=[0, 0.03, 1, 0.95])
        
    print("\n‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")
    plt.show()

if __name__ == "__main__":
    data_dir = select_directory()
    
    if data_dir:
        statistics = parse_pascal_voc_files(data_dir)
        
        if statistics:
            plot_distributions(statistics)
    else:
        print("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –Ω–µ –æ–±—Ä–∞–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")