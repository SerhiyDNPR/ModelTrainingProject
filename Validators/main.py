# main.py

import cv2
import tkinter as tk
from tkinter import filedialog
import pandas as pd
import os
import torch
import datetime as dt
import json
from Validators.video_processor import VideoProcessor
from Validators.yolo_wrapper import YOLOWrapper
from Validators.yolov9_wrapper import YOLOv9Wrapper
from Validators.detr_wrapper import DETRWrapper
from Validators.deformable_detr_wrapper import DeformableDETRWrapper
from Validators.faster_rcnn_wrapper import FasterRCNNWrapper
from Validators.fcos_wrapper import FCOSWrapper
from Validators.rt_detr_ultralytics_wrapper import RTDETRUltralyticsWrapper
from Validators.mask_rcnn_wrapper import MaskRCNNWrapper
from Validators.retinanet_wrapper import RetinaNetWrapper


# --- –û–°–ù–û–í–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
VIDEO_DIR = r"C:\Users\serhi\OneDrive\CD_DSST\Article_syntetic_data\Data_for_tests\Video_interceptors"
FILENAME_FILTER = "–ó–∞–ª–∞"
CLASS_NAMES = ['Zala', 'SuperCum']
CONF_THRESHOLD = 0.5

MODEL_FACTORIES = {
    "YOLOv8": YOLOWrapper,
    "YOLOv9": YOLOv9Wrapper,
    "DETR": DETRWrapper,
    "Deformable DETR": DeformableDETRWrapper,
    "Faster R-CNN (ResNet50/ResNet101/MobileNet)": FasterRCNNWrapper,
    "FCOS (ResNet50)": FCOSWrapper,
    "RT DETR (Ultralitics)": RTDETRUltralyticsWrapper,
    "Mask R-CNN (ResNet50)": MaskRCNNWrapper,
    "RetinaNet (ResNet50)": RetinaNetWrapper
}


def setup_gui(window_name, processor):
    """–°—Ç–≤–æ—Ä—é—î –≤—ñ–∫–Ω–æ —Ç–∞ —Ç—Ä–µ–∫–±–∞—Ä."""
    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    cv2.createTrackbar("Timeline", window_name, 0, 1000, processor.on_trackbar_change)

def load_filters_from_json():
    """–ü—Ä–æ–ø–æ–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ —Ñ–∞–π–ª—É JSON."""
    root = tk.Tk()
    root.withdraw()
    
    filepath = filedialog.askopenfilename(
        title="–û–±–µ—Ä—ñ—Ç—å filters.json –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑ –Ω—É–ª—è)",
        filetypes=[("JSON files", "*.json")]
    )
    
    if not filepath:
        print("‚ÑπÔ∏è –§–∞–π–ª —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –Ω–µ –æ–±—Ä–∞–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∑ –Ω—É–ª—è.")
        return []
        
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            filters_data = json.load(f)
        if isinstance(filters_data, list):
            return filters_data
        else:
            print("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –Ω–µ–≤—ñ—Ä–Ω–∏–π (–æ—á—ñ–∫—É—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫). –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –Ω—É–ª—è.")
            return []
    except (json.JSONDecodeError, FileNotFoundError) as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤: {e}. –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –Ω—É–ª—è.")
        return []

def main():
    root = tk.Tk()
    root.withdraw()

    try:
        num_models = int(input("–°–∫—ñ–ª—å–∫–∏ –º–æ–¥–µ–ª–µ–π –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏? (–≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ): ").strip())
        if num_models < 1:
            num_models = 1
            print("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –ë—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ 1 –º–æ–¥–µ–ª—å.")
    except ValueError:
        num_models = 1
        print("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥. –ë—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ 1 –º–æ–¥–µ–ª—å.")

    loaded_models = []
    model_choices = list(MODEL_FACTORIES.keys())
    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"–û–±—Ä–∞–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏: {device.upper()}")

    for i in range(num_models):
        print(f"\n--- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ú–æ–¥–µ–ª—ñ ‚Ññ{i+1} ---")
        
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –º–æ–¥–µ–ª—ñ:")
        for j, name in enumerate(model_choices, 1):
            print(f"  {j}: {name}")
        
        try:
            choice_idx = int(input(f"–í–∞—à –≤–∏–±—ñ—Ä –¥–ª—è –º–æ–¥–µ–ª—ñ ‚Ññ{i+1}: ")) - 1
            if not 0 <= choice_idx < len(model_choices): raise ValueError
            model_name = model_choices[choice_idx]
            print(f"–í–∏ –æ–±—Ä–∞–ª–∏: {model_name}")
        except (ValueError, IndexError):
            print("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ü—Ä–æ–ø—É—Å–∫ —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ.")
            continue

        model_path = filedialog.askopenfilename(
            title=f"–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –≤–∞–≥ –¥–ª—è {model_name} (.pth –∞–±–æ .pt)",
            filetypes=[("Model files", "*.pth *.pt")]
        )
        if not model_path:
            print("–§–∞–π–ª –º–æ–¥–µ–ª—ñ –Ω–µ –æ–±—Ä–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ.")
            continue
        print(f"–û–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –≤–∞–≥: {model_path}")

        # --- CHANGE: Added SAHI option logic ---
        use_tracker_for_this_model = False
        use_sahi_for_this_model = False

        if model_name == "YOLOv8":
            sahi_choice = input(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ SAHI (slicing) –¥–ª—è –º–æ–¥–µ–ª—ñ '{model_name}'? (y/n): ").strip().lower()
            if sahi_choice in ['y', 'yes', '–Ω', '—Ç–∞–∫']:
                use_sahi_for_this_model = True
                use_tracker_for_this_model = False  # Force disable tracker
                print("‚úÖ –î–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ –±—É–¥–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ SAHI. ByteTrack –≤–∏–º–∫–Ω–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –Ω–µ—Å—É–º—ñ—Å–Ω—ñ.")
                break
        
        # Ask about tracker only if SAHI was not selected
        if not use_sahi_for_this_model:
            tracker_choice = input(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ ByteTrack –¥–ª—è –º–æ–¥–µ–ª—ñ '{model_name}'? (y/n): ").strip().lower()
            if tracker_choice in ['y', 'yes', '–Ω', '—Ç–∞–∫']:
                use_tracker_for_this_model = True
                print("‚úÖ –î–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ –±—É–¥–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ ByteTrack.")
                break
            else:
                use_tracker_for_this_model = False
                print("‚òëÔ∏è –î–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ –±—É–¥–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–≤–∏—á–∞–π–Ω—É –¥–µ—Ç–µ–∫—Ü—ñ—é.")

        try:
            model_wrapper_class = MODEL_FACTORIES[model_name]
            model_wrapper = model_wrapper_class(class_names=CLASS_NAMES, device=device)
            
            # Pass the use_sahi flag to the load method for YOLOv8 ---
            if model_name == "YOLOv8":
                model_wrapper.load(model_path, use_sahi=use_sahi_for_this_model)
            else:
                model_wrapper.load(model_path)
            
            filename_no_ext = os.path.splitext(os.path.basename(model_path))[0]
            
            loaded_models.append({
                'name': model_name,               
                'filename': filename_no_ext,      
                'wrapper': model_wrapper,
                'use_tracker': use_tracker_for_this_model 
            })
            
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å {model_name} –∑ —Ñ–∞–π–ª—É {model_path}. –ü–æ–º–∏–ª–∫–∞: {e}")

    if not loaded_models:
        print("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –º–æ–¥–µ–ª—ñ. –í–∏—Ö—ñ–¥.")
        return

    initial_filters = load_filters_from_json()

    timestamp = dt.datetime.now().strftime("%Y-%m-%d_%H%M%S")
    log_filename = f"Comparison_Results_{FILENAME_FILTER}_{timestamp}.csv"
    print(f"\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—å —É –Ω–æ–≤–∏–π —Ñ–∞–π–ª: {log_filename}")

    window_name = "Multi-Model Validation"
    
    processor = VideoProcessor(loaded_models, window_name, CONF_THRESHOLD, initial_filters=initial_filters)

    video_files = processor.find_video_files(VIDEO_DIR, FILENAME_FILTER)
    if not video_files: return
    
    setup_gui(window_name, processor)
    
    for video_path in video_files:
        print(f"\n‚ñ∂Ô∏è –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ: {video_path}")
        if processor.run_on_video(video_path):
            print("‚èπÔ∏è –û–±—Ä–æ–±–∫—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
            break

    if processor.log_records:
        final_df = pd.DataFrame(processor.log_records)
        final_df.to_csv(log_filename, index=False)
        print(f"\n‚úÖ –û–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ: {log_filename}")
    else:
        print("\n–û–±—Ä–æ–±–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Å—É.")
    
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()